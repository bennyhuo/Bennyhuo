import{_ as t,X as p,Y as e,Z as n,a0 as s,$ as o,a1 as c,D as l}from"./framework-98842e7a.js";const u={},i=c(`<h1 id="_10-访问外部函数的新-api-jni-要凉了" tabindex="-1"><a class="header-anchor" href="#_10-访问外部函数的新-api-jni-要凉了" aria-hidden="true">#</a> 10. 访问外部函数的新 API，JNI 要凉了？</h1><blockquote><p>JNI 不安全还繁琐，所以 Java 搞了一套新的 API，结果把这事儿搞得更复杂了。。。</p></blockquote><p>我们书接上回，接着聊 <strong>JEP 412: Foreign Function &amp; Memory API (Incubator)</strong> 当中访问外部函数的内容。</p><h2 id="调用自定义-c-函数" tabindex="-1"><a class="header-anchor" href="#调用自定义-c-函数" aria-hidden="true">#</a> 调用自定义 C 函数</h2><p>新 API 加载 Native 库的行为没有发生变化，还是使用 System::loadLibrary 和 System::load 来实现。</p><p>相比之前，JNI 需要提前通过声明 native 方法来实现与外部函数的绑定，新 API 则提供了直接在 Java 层通过函数符号来定位外部函数的能力：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">&quot;libsimple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SymbolLookup</span> loaderLookup <span class="token operator">=</span> <span class="token class-name">SymbolLookup</span><span class="token punctuation">.</span><span class="token function">loaderLookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MemoryAddress</span> getCLangVersion <span class="token operator">=</span> loaderLookup<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">&quot;GetCLangVersion&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的 C 函数如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">GetCLangVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> __STDC_VERSION__<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上手段，我们直接获得了外部函数的地址，接下来我们就可以使用它们来完成调用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MethodHandle</span> getClangVersionHandle <span class="token operator">=</span> <span class="token class-name">CLinker</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">downcallHandle</span><span class="token punctuation">(</span>
    getCLangVersion<span class="token punctuation">,</span>
    <span class="token class-name">MethodType</span><span class="token punctuation">.</span><span class="token function">methodType</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">FunctionDescriptor</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">C_INT</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>getClangVersionHandle<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行程序的时候需要把编译好的 Native 库放到 java.library.path 指定的路径下，例如我把编译好的 libsimple.dll 放到了 lib/bin 目录下，所以：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Djava.library.path=./lib/bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>201112
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看出来，我的 C 编译器觉得自己的版本是 C11。</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates-10-foreignapi-callfunction/2486C86A.gif" alt="img"></p><h2 id="调用系统-c-函数" tabindex="-1"><a class="header-anchor" href="#调用系统-c-函数" aria-hidden="true">#</a> 调用系统 C 函数</h2><p>如果是加载 C 标准库当中的函数，则应使用 CLinker::systemLookup，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MemoryAddress</span> strlen <span class="token operator">=</span> <span class="token class-name">CLinker</span><span class="token punctuation">.</span><span class="token function">systemLookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">&quot;strlen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MethodHandle</span> strlenHandle <span class="token operator">=</span> <span class="token class-name">CLinker</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">downcallHandle</span><span class="token punctuation">(</span>
    strlen<span class="token punctuation">,</span>
    <span class="token class-name">MethodType</span><span class="token punctuation">.</span><span class="token function">methodType</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MemoryAddress</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">FunctionDescriptor</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">C_INT</span><span class="token punctuation">,</span> <span class="token constant">C_POINTER</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token class-name">CLinker</span><span class="token punctuation">.</span><span class="token function">toCString</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!!&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ResourceScope</span><span class="token punctuation">.</span><span class="token function">newImplicitScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strlenHandle<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>13
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates-10-foreignapi-callfunction/24876314.jpg" alt="img"></p><h2 id="结构体入参" tabindex="-1"><a class="header-anchor" href="#结构体入参" aria-hidden="true">#</a> 结构体入参</h2><p>对于比较复杂的场景，例如传入结构体：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token keyword">long</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>
  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Person<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">DumpPerson</span><span class="token punctuation">(</span>Person <span class="token operator">*</span>person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Person%%%lld(id=%lld, name=%s, age=%d)\\n&quot;</span><span class="token punctuation">,</span>
         <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">,</span>
         person<span class="token operator">-&gt;</span>id<span class="token punctuation">,</span>
         person<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span>
         person<span class="token operator">-&gt;</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> person<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d, &quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种情况我们首先需要在 Java 当中构造一个 Person 实例，然后把它的地址传给 DumpPerson，这个过程比较复杂，我们分步骤来介绍：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MemoryLayout</span> personLayout <span class="token operator">=</span> <span class="token class-name">MemoryLayout</span><span class="token punctuation">.</span><span class="token function">structLayout</span><span class="token punctuation">(</span>
    <span class="token constant">C_LONG_LONG</span><span class="token punctuation">.</span><span class="token function">withName</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">MemoryLayout</span><span class="token punctuation">.</span><span class="token function">sequenceLayout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token constant">C_CHAR</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withName</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">MemoryLayout</span><span class="token punctuation">.</span><span class="token function">paddingLayout</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token constant">C_INT</span><span class="token punctuation">.</span><span class="token function">withName</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先我们定义好内存布局，每一个成员我们可以指定一个名字，这样在后面方便定位。注意，由于 Person 的 name 只占 10 个字节（我说我是故意的你信吗），因此这里还有内存对齐问题，根据实际情况设置对应大小的 paddingLayout。</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates-10-foreignapi-callfunction/24891F0C.png" alt="img"></p><p>接下来我们用这个布局来开辟堆外内存：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MemorySegment</span> person <span class="token operator">=</span> <span class="token class-name">MemorySegment</span><span class="token punctuation">.</span><span class="token function">allocateNative</span><span class="token punctuation">(</span>personLayout<span class="token punctuation">,</span> <span class="token function">newImplicitScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面就要初始化这个 Person 了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">VarHandle</span> idHandle <span class="token operator">=</span> personLayout<span class="token punctuation">.</span><span class="token function">varHandle</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MemoryLayout<span class="token punctuation">.</span>PathElement</span><span class="token punctuation">.</span><span class="token function">groupElement</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
idHandle<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> ageHandle <span class="token operator">=</span> personLayout<span class="token punctuation">.</span><span class="token function">varHandle</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MemoryLayout<span class="token punctuation">.</span>PathElement</span><span class="token punctuation">.</span><span class="token function">groupElement</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ageHandle<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 id 和 name 分别定位到对应的字段，并初始化它们，这两个都比较简单。</p><p>接下来我们看下如何初始化一个 char[]。</p><p>方法1，逐个写入：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">VarHandle</span> nameHandle <span class="token operator">=</span> personLayout<span class="token punctuation">.</span><span class="token function">varHandle</span><span class="token punctuation">(</span>
     <span class="token keyword">byte</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
     <span class="token class-name">MemoryLayout<span class="token punctuation">.</span>PathElement</span><span class="token punctuation">.</span><span class="token function">groupElement</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token class-name">MemoryLayout<span class="token punctuation">.</span>PathElement</span><span class="token punctuation">.</span><span class="token function">sequenceElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意我们获取 nameHandle 的方式，要先定位到 name 对应的布局，它实际上是个 sequenceLayout，所以要紧接着用 sequenceElement 来定位它。如果还有更深层次的嵌套，可以在 varHandle(...) 方法当中添加更多的参数来逐级定位。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">&quot;bennyhuo&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    nameHandle<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> i<span class="token punctuation">,</span> bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
nameHandle<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就是循环赋值，一个字符一个字符写入，比较直接。不过，有个细节要注意，Java 的 char 是两个字节，C 的 char 是一个字节，因此这里要用 Java 的 byte 来写入。</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates-10-foreignapi-callfunction/248B4835.jpg" alt="img"></p><p>方法2，直接复制 C 字符串：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>person<span class="token punctuation">.</span><span class="token function">asSlice</span><span class="token punctuation">(</span>personLayout<span class="token punctuation">.</span><span class="token function">byteOffset</span><span class="token punctuation">(</span><span class="token class-name">MemoryLayout<span class="token punctuation">.</span>PathElement</span><span class="token punctuation">.</span><span class="token function">groupElement</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token function">copyFrom</span><span class="token punctuation">(</span><span class="token class-name">CLinker</span><span class="token punctuation">.</span><span class="token function">toCString</span><span class="token punctuation">(</span><span class="token string">&quot;bennyhuo&quot;</span><span class="token punctuation">,</span> <span class="token function">newImplicitScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>asSlice 可以通过内存偏移得到 name 这个字段的地址对应的 MemorySegment 对象，然后通过它的 copyFrom 把字符串直接全部复制过来。</p><p>两种方法各有优缺点。</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates-10-foreignapi-callfunction/248B5B9E.jpg" alt="img"></p><p>接下来就是函数调用了，与前面几个例子基本一致：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MemoryAddress</span> dumpPerson <span class="token operator">=</span> loaderLookup<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">&quot;DumpPerson&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MethodHandle</span> dumpPersonHandle <span class="token operator">=</span> <span class="token class-name">CLinker</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">downcallHandle</span><span class="token punctuation">(</span>
    dumpPerson<span class="token punctuation">,</span>
    <span class="token class-name">MethodType</span><span class="token punctuation">.</span><span class="token function">methodType</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MemoryAddress</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">FunctionDescriptor</span><span class="token punctuation">.</span><span class="token function">ofVoid</span><span class="token punctuation">(</span><span class="token constant">C_POINTER</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

dumpPersonHandle<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Person%24(id=1000000, name=bennyhuo, age=30)
64, 66, 15, 0, 0, 0, 0, 0, 98, 101, 110, 110, 121, 104, 117, 111, 0, 0, 0, 0, 30, 0, 0, 0, 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们把内存的每一个字节都打印出来，在 Java 层也可以打印这个值，这样方便我们调试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> person<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上是单纯的 Java 调用 C 函数的情形。</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates-10-foreignapi-callfunction/248C0DE7.png" alt="img"></p><h2 id="函数指针入参" tabindex="-1"><a class="header-anchor" href="#函数指针入参" aria-hidden="true">#</a> 函数指针入参</h2><p>很多时候我们需要在 C 代码当中调用 Java 方法，JNI 的做法就是反射，但这样会有些安全问题。 新 API 也提供了类似的手段，允许我们把 Java 方法像函数指针那样传给 C 函数，让 C 函数去调用。</p><p>下面我们给出一个非常简单的例子，大家重点关注如何传递 Java 方法给 C 函数。</p><p>我们首先给出 C 函数的定义，它的功能实际上就是遍历一个数组，调用传入的函数 on_each。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>OnEach<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">ForEach</span><span class="token punctuation">(</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> OnEach on_each<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">on_each</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 层想要调用 ForEach 这个函数，最关键的地方就是构造 on_each 这个函数指针。接下来我们给出它的 Java 层的定义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">onEach</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;onEach: &quot;</span> <span class="token operator">+</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后把 onEach 转成函数指针，我们只需要通过 MethodHandles 来定位这个方法，得到一个 MethodHandle 实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MethodHandle</span> onEachHandle <span class="token operator">=</span> <span class="token class-name">MethodHandles</span><span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findStatic</span><span class="token punctuation">(</span>
    <span class="token class-name">ForeignApis</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;onEach&quot;</span><span class="token punctuation">,</span>
    <span class="token class-name">MethodType</span><span class="token punctuation">.</span><span class="token function">methodType</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着获取这个函数的地址：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MemoryAddress</span> onEachHandleAddress <span class="token operator">=</span> <span class="token class-name">CLinker</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">upcallStub</span><span class="token punctuation">(</span>
    onEachHandle<span class="token punctuation">,</span> <span class="token class-name">FunctionDescriptor</span><span class="token punctuation">.</span><span class="token function">ofVoid</span><span class="token punctuation">(</span><span class="token constant">C_INT</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">newImplicitScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再调用 CLinker 的 upcallStub 来得到它的地址。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> originalArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">MemorySegment</span> array <span class="token operator">=</span> <span class="token class-name">MemorySegment</span><span class="token punctuation">.</span><span class="token function">allocateNative</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token function">newImplicitScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
array<span class="token punctuation">.</span><span class="token function">copyFrom</span><span class="token punctuation">(</span><span class="token class-name">MemorySegment</span><span class="token punctuation">.</span><span class="token function">ofArray</span><span class="token punctuation">(</span>originalArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">MemoryAddress</span> forEach <span class="token operator">=</span> loaderLookup<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">&quot;ForEach&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">MethodHandle</span> forEachHandle <span class="token operator">=</span> <span class="token class-name">CLinker</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">downcallHandle</span><span class="token punctuation">(</span>
    forEach<span class="token punctuation">,</span>
    <span class="token class-name">MethodType</span><span class="token punctuation">.</span><span class="token function">methodType</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MemoryAddress</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MemoryAddress</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">FunctionDescriptor</span><span class="token punctuation">.</span><span class="token function">ofVoid</span><span class="token punctuation">(</span><span class="token constant">C_POINTER</span><span class="token punctuation">,</span> <span class="token constant">C_INT</span><span class="token punctuation">,</span> <span class="token constant">C_POINTER</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
forEachHandle<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> originalArray<span class="token punctuation">.</span>length<span class="token punctuation">,</span> onEachHandleAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>剩下的就是构造一个 int 数组，然后再调用 ForEach 这个 C 函数，这与前面调用其他 C 函数的方式是一致的。</p><p>运行结果显而易见：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>onEach: 1
onEach: 2
onEach: 3
onEach: 4
onEach: 5
onEach: 6
onEach: 7
onEach: 8
onEach: 9
onEach: 10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates-10-foreignapi-callfunction/2490A30F.png" alt="img"></p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>这篇文章我们介绍了一下 Java 新提供的这套访问外部函数的 API，相比之下它确实比过去有了更丰富的能力，不过用起来也并不轻松。将来即便正式发布，我个人觉得也需要一些工具来处理这些模板代码的生成（例如基于注解处理器的代码生成框架），以降低使用复杂度。</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates/88F4535C.gif" alt=""></p><p>就目前的情况来讲，其实我更愿意用 JNI，不安全怎么了，小心点儿不就行了嘛。算了，写什么垃圾 Java，直接写 C++ 不香吗？</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates/88F3D38D.gif" alt=""></p><h2 id="关于作者" tabindex="-1"><a class="header-anchor" href="#关于作者" aria-hidden="true">#</a> 关于作者</h2><p><strong>霍丙乾 bennyhuo</strong>，Google 开发者专家（Kotlin 方向）；<strong>《深入理解 Kotlin 协程》</strong> 作者（机械工业出版社，2020.6）；<strong>《深入实践 Kotlin 元编程》</strong> 作者（机械工业出版社，2023.8）；移动客户端工程师，先后就职于腾讯地图、猿辅导、腾讯视频。</p>`,79),k=n("li",null,"GitHub：https://github.com/bennyhuo",-1),d=n("li",null,"博客：https://www.bennyhuo.com",-1),r={href:"https://space.bilibili.com/28615855",target:"_blank",rel:"noopener noreferrer"},v=n("strong",null,"霍丙乾 bennyhuo",-1),m=n("li",null,[s("微信公众号："),n("strong",null,"霍丙乾 bennyhuo")],-1);function b(g,y){const a=l("ExternalLinkIcon");return p(),e("div",null,[i,n("ul",null,[k,d,n("li",null,[s("bilibili："),n("a",r,[v,o(a)])]),m])])}const h=t(u,[["render",b],["__file","10-foreignapi-callfunction.html.vue"]]);export{h as default};
