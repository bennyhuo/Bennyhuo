import{_ as t,X as p,Y as o,Z as n,a0 as s,$ as e,a1 as c,D as i}from"./framework-98842e7a.js";const l={},u=c(`<h1 id="_7-模式匹配要支持-switch-啦" tabindex="-1"><a class="header-anchor" href="#_7-模式匹配要支持-switch-啦" aria-hidden="true">#</a> 7. 模式匹配要支持 switch 啦</h1><blockquote><p>Java 的 switch 又加强啦！</p></blockquote><p>这一次我们来聊聊 <strong>JEP 406: Pattern Matching for switch (Preview)</strong>。这是一个预览特性。</p><p>前面我们提到过 Java 16 引入了一个对于 instanceof 的模式匹配：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Old code</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> use s <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">// New code</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> use s <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个其实从效果上类似于 Kotlin 的智能类型转换：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">is</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// now \`o\` is smart casted to String </span>
    <span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates-07-switch/0B330ECC.gif" alt=""></p><p>不过，模式匹配可以做的事情更多。</p><p>Java 17 引入了一个 preview 的特性，可以通过 switch 语句来实现类似的类型模式匹配：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">formatterPatternSwitch</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">Integer</span> i <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;int %d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Long</span> l    <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;long %d&quot;</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Double</span> d  <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;double %f&quot;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">String</span> s  <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;String %s&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span>        <span class="token operator">-&gt;</span> o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于每一个 case 语句，我们都可以使用类型模式匹配，如果 o 的类型是 Integer，那么它就可以匹配到第一个 case 分支，并且在这个分支内部可以用新变量 i 来替代 o。</p><p>请注意，switch 语句在 Java 14 正式支持了表达式，有些朋友可能对这个语法不是很熟悉， 每一个 case 语句后面的 <code>-&gt;</code> 都是一个表达式，并且不会落到下一个 case 分支，所以大家也不会在这里看到 break。不仅如此，switch 表达式的参数 o 的类型也做了放宽，我们在后面介绍密封类的时候还可以看到对这一点的运用。</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates/74379640.jpg" alt=""></p><p>不仅如此，这次 switch 表达式还添加了对 null 的支持：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testFooBar</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token keyword">null</span>         <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Oops&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&quot;Foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bar&quot;</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Great&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span>           <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们就可以把 null 放到第一个分支来实现空检查了，非常方便。</p><p>模式匹配在 Java 的近亲 Scala 上得到了广泛的运用，当然 Scala 的模式匹配要复杂得多，下面是我从 Scala 官网摘的例子：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> Notification
<span class="token keyword">case</span> <span class="token keyword">class</span> Email<span class="token punctuation">(</span>sender<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> body<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Notification
<span class="token keyword">case</span> <span class="token keyword">class</span> SMS<span class="token punctuation">(</span>caller<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Notification
<span class="token keyword">case</span> <span class="token keyword">class</span> VoiceRecording<span class="token punctuation">(</span>contactName<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> link<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Notification

<span class="token keyword">def</span> showNotification<span class="token punctuation">(</span>notification<span class="token operator">:</span> Notification<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  notification <span class="token keyword">match</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> Email<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> title<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;You got an email from </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">sender</span></span><span class="token string"> with title: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">title</span></span><span class="token string">&quot;</span></span>
    <span class="token keyword">case</span> SMS<span class="token punctuation">(</span>number<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;You got an SMS from </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">number</span></span><span class="token string">! Message: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">message</span></span><span class="token string">&quot;</span></span>
    <span class="token keyword">case</span> VoiceRecording<span class="token punctuation">(</span>name<span class="token punctuation">,</span> link<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;You received a Voice Recording from </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">! Click the link to hear it: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">link</span></span><span class="token string">&quot;</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>case class 类似于 Java 当中的 record，或者 Kotlin 当中的 data class，我们看到下面的 match 语句当中，<code>case Email(sender, tit le, _)</code> 语句可以直接对待匹配的对象做解构。此外，还可以添加模式守卫（Pattern Guard），例如：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">def</span> showImportantNotification<span class="token punctuation">(</span>notification<span class="token operator">:</span> Notification<span class="token punctuation">,</span> importantPeopleInfo<span class="token operator">:</span> Seq<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  notification <span class="token keyword">match</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> Email<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token keyword">if</span> importantPeopleInfo<span class="token punctuation">.</span>contains<span class="token punctuation">(</span>sender<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token string">&quot;You got an email from special someone!&quot;</span>
    <span class="token keyword">case</span> SMS<span class="token punctuation">(</span>number<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token keyword">if</span> importantPeopleInfo<span class="token punctuation">.</span>contains<span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> <span class="token string">&quot;You got an SMS from special someone!&quot;</span>
    <span class="token keyword">case</span> other <span class="token keyword">=&gt;</span> showNotification<span class="token punctuation">(</span>other<span class="token punctuation">)</span> <span class="token comment">// nothing special, delegate to our original showNotification function</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意每一条 case 后面的 if，在匹配的时候，也需要命中 if 后面的表达式。</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates/74376397.png" alt=""></p><p>Java 在后续的发展过程当中也许也存在添加这样的语法的可能性。</p><p>Kotlin 在演进的过程中曾经也一度想要把 when 表达式做成模式匹配，不过可能是后面觉得模式匹配的实用价值不高（???），就没有继续做下去。</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates/7436CC1A.gif" alt=""></p><p>稍微提一下，如果想要体验预览特性，需要为 Java 编译器和 Java 运行时添加 <code>--enable-preview</code> 参数。</p><p>好，关于预览的 switch 模式匹配我们就先介绍这么多。</p><h2 id="关于作者" tabindex="-1"><a class="header-anchor" href="#关于作者" aria-hidden="true">#</a> 关于作者</h2><p><strong>霍丙乾 bennyhuo</strong>，Google 开发者专家（Kotlin 方向）；<strong>《深入理解 Kotlin 协程》</strong> 作者（机械工业出版社，2020.6）；<strong>《深入实践 Kotlin 元编程》</strong> 作者（机械工业出版社，2023.8）；移动客户端工程师，先后就职于腾讯地图、猿辅导、腾讯视频。</p>`,30),k=n("li",null,"GitHub：https://github.com/bennyhuo",-1),r=n("li",null,"博客：https://www.bennyhuo.com",-1),d={href:"https://space.bilibili.com/28615855",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"霍丙乾 bennyhuo",-1),v=n("li",null,[s("微信公众号："),n("strong",null,"霍丙乾 bennyhuo")],-1);function g(b,f){const a=i("ExternalLinkIcon");return p(),o("div",null,[u,n("ul",null,[k,r,n("li",null,[s("bilibili："),n("a",d,[m,e(a)])]),v])])}const h=t(l,[["render",g],["__file","07-switch.html.vue"]]);export{h as default};
