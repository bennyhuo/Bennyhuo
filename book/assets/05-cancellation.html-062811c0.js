import{_ as p,X as o,Y as c,Z as n,a0 as s,$ as t,a1 as e,D as l}from"./framework-98842e7a.js";const i={},u=e(`<h1 id="_5-协程取消篇" tabindex="-1"><a class="header-anchor" href="#_5-协程取消篇" aria-hidden="true">#</a> 5. 协程取消篇</h1><blockquote><p>协程的任务的取消需要靠协程内部调用的协作支持，这就类似于我们线程中断以及对中断状态的响应一样。</p></blockquote><h2 id="_1-线程的中断" tabindex="-1"><a class="header-anchor" href="#_1-线程的中断" aria-hidden="true">#</a> 1. 线程的中断</h2><p>我们先从大家熟悉的话题讲起。线程有一个被废弃的 <code>stop</code> 方法，这个方法会让线程立即死掉，并且释放它持有的锁，这样会让它正在读写的存储处于一个不安全的状态，因此 <code>stop</code> 被废弃了。如果我们启动了一个线程并让它执行一些任务，但很快我们就后悔了，<code>stop</code> 还不让用，那该怎么办？</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> thread <span class="token operator">=</span> thread <span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
thread<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// !!! Deprecated!!!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们应该想办法让线程内部正在运行的任务跟我们合作把任务停掉，这样线程内部的任务停止之前还有机会清理一些资源，比如关闭流等等。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> thread <span class="token operator">=</span> thread <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> InterruptedException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Interrupted, do cleaning stuff.&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像 <code>sleep</code> 这样的方法调用，文档明确指出它支持 <code>InterruptedException</code>，因此当线程被标记为中断状态时，它就会抛出 <code>InterruptedException</code> ，那么我们自然就可以捕获异常并做资源清理了。</p><p>所以请注意所谓的协作式的任务终止，协程的取消也就是 <code>cancel</code> 机制的思路也是如此。</p><h2 id="_2-协程类似的例子" tabindex="-1"><a class="header-anchor" href="#_2-协程类似的例子" aria-hidden="true">#</a> 2. 协程类似的例子</h2><p>我们来看一个协程取消的例子：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token keyword">val</span> job1 <span class="token operator">=</span> launch <span class="token punctuation">{</span> <span class="token comment">// ①</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// ②</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    job1<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// ③</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次我们用了一个不一样的写法，我们没有用 suspend main，而是直接用 <code>runBlocking</code> 启动协程，这个方法在 Native 上也存在，都是基于当前线程启动一个类似于 Android 的 Looper 的死循环，或者叫消息队列，可以不断的发送消息给它进行处理。<code>runBlocking</code> 会启动一个 <code>Job</code>，因此这里也存在默认的作用域，不过这对于我们今天的讨论暂时没有太大影响。</p><p>这段代码 ① 处启动了一个子协程，它内部先输出 1，接着开始 <code>delay</code>， <code>delay</code> 与线程的 <code>sleep</code> 不同，它不会阻塞线程，你可以认为它实际上就是触发了一个延时任务，告诉协程调度系统 1000ms 之后再来执行后面的这段代码（也就是 log(2)）；而在这期间，我们在 ③ 处对刚才启动的协程触发了取消，因此在 ② 处的 <code>delay</code> 还没有回调的时候协程就被取消了，因为 <code>delay</code> 可以响应取消，因此 <code>delay</code> 后面的代码就不会再次调度了，不调度的原因也很简单，② 处的 <code>delay</code> 会抛一个 <code>CancellationException</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;cancelled. </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">e</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">..</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么输出的结果就不一样了：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>06:54:56:361 [main] 1
06:54:56:408 [main] 3
06:54:56:411 [main] 4
06:54:56:413 [main] cancelled. kotlinx.coroutines.JobCancellationException: Job was cancelled; job=StandaloneCoroutine{Cancelling}@e73f9ac
06:54:56:413 [main] 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大家看，这与线程的中断逻辑是不是非常的类似呢？</p><h2 id="_3-完善我们之前的例子" tabindex="-1"><a class="header-anchor" href="#_3-完善我们之前的例子" aria-hidden="true">#</a> 3. 完善我们之前的例子</h2><p>之前我们有个例子，上一篇文章已经加入了异常处理逻辑，那么这次我们给它加上取消逻辑。之前是这样：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">getUserCoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> suspendCoroutine<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span> continuation <span class="token operator">-&gt;</span>
    <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> Callback<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>value<span class="token operator">:</span> User<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            continuation<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onError</span><span class="token punctuation">(</span>t<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            continuation<span class="token punctuation">.</span><span class="token function">resumeWithException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加取消逻辑，那需要我们的 <code>getUser</code> 回调版本支持取消，我们看下我们的 <code>getUser</code> 是怎么实现的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">getUser</span><span class="token punctuation">(</span>callback<span class="token operator">:</span> Callback<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> call <span class="token operator">=</span> <span class="token function">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>
            Request<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;https://api.github.com/users/bennyhuo&quot;</span></span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> okhttp3<span class="token punctuation">.</span><span class="token function">Callback</span> <span class="token punctuation">{</span>
        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token punctuation">,</span> e<span class="token operator">:</span> IOException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            callback<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token punctuation">,</span> response<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    callback<span class="token punctuation">.</span><span class="token function">onSuccess</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    callback<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token comment">// 这里可能是解析异常</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token operator">?:</span> callback<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span><span class="token function">NullPointerException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;ResponseBody is null.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发了个网络请求给 Github，让它把一个叫 <code>bennyhuo</code> 的用户信息返回来，我们知道 OkHttp 的这个 <code>Call</code> 是支持 <code>cancel</code> 的， 取消后，网络请求过程中如果读取到这个取消的状态，就会把请求给停止掉。既然这样，我们干脆直接改造 <code>getUser</code> 好了，这样还能省掉我们自己的 <code>Callback</code> 回调过程：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">getUserCoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> suspendCancellableCoroutine<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span> continuation <span class="token operator">-&gt;</span>
    <span class="token keyword">val</span> call <span class="token operator">=</span> <span class="token function">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span>

    continuation<span class="token punctuation">.</span><span class="token function">invokeOnCancellation</span> <span class="token punctuation">{</span> <span class="token comment">// ①</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;invokeOnCancellation: cancel the request.&quot;</span></span><span class="token punctuation">)</span>
        call<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> okhttp3<span class="token punctuation">.</span><span class="token function">Callback</span> <span class="token punctuation">{</span>
        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token punctuation">,</span> e<span class="token operator">:</span> IOException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;onFailure: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">e</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            continuation<span class="token punctuation">.</span><span class="token function">resumeWithException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token punctuation">,</span> response<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;onResponse: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">response<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    continuation<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    continuation<span class="token punctuation">.</span><span class="token function">resumeWithException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token operator">?:</span> continuation<span class="token punctuation">.</span><span class="token function">resumeWithException</span><span class="token punctuation">(</span><span class="token function">NullPointerException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;ResponseBody is null.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们这里用到了 <code>suspendCancellableCoroutine</code>，而不是之前的 <code>suspendCoroutine</code>，这就是为了让我们的挂起函数支持协程的取消。该方法将获取到的 <code>Continuation</code> 包装成了一个 <code>CancellableContinuation</code>，通过调用它的 <code>invokeOnCancellation</code> 方法可以设置一个取消事件的回调，一旦这个回调被调用，那么意味着 <code>getUserCoroutine</code> 调用所在的协程被取消了，这时候我们也要相应的做出取消的响应，也就是把 OkHttp 发出去的请求给取消掉。</p><p>那么我们在调用它的时候，如果遇到了取消，会怎么样呢？</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> job1 <span class="token operator">=</span> launch <span class="token punctuation">{</span> <span class="token comment">//①</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> user <span class="token operator">=</span> <span class="token function">getUserCoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
job1<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意我们启动 ① 之后仅仅延迟了 10ms 就取消了它，网络请求的速度一般来讲还不会这么快，因此取消的时候大概率 <code>getUserCoroutine</code> 被挂起了，因此结果大概率是：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token number">07</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">751</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token number">1</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">120</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token number">3</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">124</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> invokeOnCancellation<span class="token operator">:</span> cancel the request<span class="token punctuation">.</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">129</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token number">4</span>
<span class="token number">07</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">131</span> <span class="token punctuation">[</span>OkHttp https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>api<span class="token punctuation">.</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">]</span> onFailure<span class="token operator">:</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token operator">:</span> Canceled
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现，取消的回调被调用了，OkHttp 在收到我们的取消指令之后，也确实停止了网络请求，并且回调给我们一个 IO 异常，这时候我们的协程已经被取消，在处于取消状态的协程上调用 <code>Continuation.resume</code> 、 <code>Continuation.resumeWithException</code> 或者 <code>Continuation.resumeWith</code> 都会被忽略，因此 OkHttp 回调中我们收到 IO 异常后调用的 <code>continuation.resumeWithException(e)</code> 不会有任何副作用。</p><h2 id="_4-再谈-retrofit-的协程扩展" tabindex="-1"><a class="header-anchor" href="#_4-再谈-retrofit-的协程扩展" aria-hidden="true">#</a> 4. 再谈 Retrofit 的协程扩展</h2><h3 id="_4-1-jake-wharton-的-adapter-存在的问题" tabindex="-1"><a class="header-anchor" href="#_4-1-jake-wharton-的-adapter-存在的问题" aria-hidden="true">#</a> 4.1 Jake Wharton 的 Adapter 存在的问题</h3>`,33),r={href:"https://www.bennyhuo.com/2019/04/01/basic-coroutines/",target:"_blank",rel:"noopener noreferrer"},k=e(`<div class="language-gradle line-numbers-mode" data-ext="gradle"><pre class="language-gradle"><code><span class="token keyword">implementation</span> <span class="token string">&#39;com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它确实可以完成网络请求，不过有细心的小伙伴发现了它的问题：它怎么取消呢？我们把使用它的代码贴出来：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> GitHubServiceApi <span class="token punctuation">{</span>
    <span class="token annotation builtin">@GET</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;users/{login}&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">getUserCoroutine</span><span class="token punctuation">(</span><span class="token annotation builtin">@Path</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;login&quot;</span></span><span class="token punctuation">)</span> login<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Deferred<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义好接口，创建 Retrofit 实例的时候传入对应的 Adapter：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> gitHubServiceApi <span class="token keyword">by</span> lazy <span class="token punctuation">{</span>
    <span class="token keyword">val</span> retrofit <span class="token operator">=</span> retrofit2<span class="token punctuation">.</span>Retrofit<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;https://api.github.com&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">addCallAdapterFactory</span><span class="token punctuation">(</span><span class="token function">CoroutineCallAdapterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 这里添加 Adapter</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>GitHubServiceApi<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用的时候就这样：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> deferred <span class="token operator">=</span> gitHubServiceApi<span class="token punctuation">.</span><span class="token function">getUserCoroutine</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;bennyhuo&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">showUser</span><span class="token punctuation">(</span>deferred<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">showError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要取消，我们可以直接调用 <code>deferred.cancel()</code>，例如：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">val</span> deferred <span class="token operator">=</span> gitHubServiceApi<span class="token punctuation">.</span><span class="token function">getUserCoroutine</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;bennyhuo&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span><span class="token punctuation">{</span>
    deferred<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">showUser</span><span class="token punctuation">(</span>deferred<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">showError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>12:59:54:185 [DefaultDispatcher-worker-1] 1
12:59:54:587 [DefaultDispatcher-worker-1] 2
kotlinx.coroutines.JobCancellationException: Job was cancelled; job=CompletableDeferredImpl{Cancelled}@36699211
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种情况下，其实网络请求确实是被取消的，这一点我们可以看下源码的处理：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">adapt</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Deferred<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">val</span> deferred <span class="token operator">=</span> CompletableDeferred<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

      deferred<span class="token punctuation">.</span><span class="token function">invokeOnCompletion</span> <span class="token punctuation">{</span> <span class="token comment">// ①</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>deferred<span class="token punctuation">.</span>isCancelled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          call<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> Callback<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token operator">..</span><span class="token punctuation">.</span>
      <span class="token punctuation">}</span>     
<span class="token punctuation">}</span>
<span class="token operator">..</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 ① 处，<code>invokeOnCompletion</code> 在协程进入完成状态时触发，包括异常和正常完成，那么在这时候如果发现它的状态是已经取消的，那么结果就直接调用 <code>Call</code> 的取消即可。</p><p>这看上去确实很正常啊~ 不过 @阿永 在公众号的评论里面提到了一个 Case，仔细一看还真是有问题。我们给出示例来复现这个 Case：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> job <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> deferred <span class="token operator">=</span> gitHubServiceApi<span class="token punctuation">.</span><span class="token function">getUserCoroutine</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;bennyhuo&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">)</span>
    deferred<span class="token punctuation">.</span><span class="token function">invokeOnCompletion</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;invokeOnCompletion, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">deferred<span class="token punctuation">.</span>isCancelled</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">showUser</span><span class="token punctuation">(</span>deferred<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">showError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
job<span class="token punctuation">.</span><span class="token function">cancelAndJoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们启动一个协程，在其中执行网络请求，那么正常来说，这时候 <code>getUserCoroutine</code> 返回的 <code>Deferred</code> 可以当做一个子协程，它应当遵循默认的作用域规则，在父作用域取消时被取消掉，但现实却并不是这样：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token number">13</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">54</span><span class="token operator">:</span><span class="token number">332</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">1</span>
<span class="token number">13</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">54</span><span class="token operator">:</span><span class="token number">829</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">2</span>
kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>JobCancellationException<span class="token operator">:</span> Job was cancelled<span class="token punctuation">;</span> job<span class="token operator">=</span>StandaloneCoroutine<span class="token punctuation">{</span>Cancelling<span class="token punctuation">}</span><span class="token label symbol">@19aea38c</span>
<span class="token number">13</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">54</span><span class="token operator">:</span><span class="token number">846</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">3</span>
<span class="token number">13</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">937</span> <span class="token punctuation">[</span>OkHttp https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>api<span class="token punctuation">.</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">]</span> invokeOnCompletion<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看到在调用 <code>deferred.await()</code> 的时候抛了个取消异常，这主要是因为 <code>await()</code> 所在的协程已经被我们用 <code>cancelAndJoin()</code> 取消，但从随后 <code>invokeOnCompletion</code> 的回调结果来看， <code>getUserCoroutine</code> 返回的 <code>Deferred</code> 并没有被取消，再仔细一看，时间上这个回调比前面的操作晚了 2s，那必然是网络请求返回之后才回调的。</p><p>所以问题究竟在哪里？在 <code>CoroutineCallAdapterFactory</code> 的实现中，为了实现异步转换，手动创建了一个 <code>CompletableDeferred</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">adapt</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Deferred<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">val</span> deferred <span class="token operator">=</span> CompletableDeferred<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// ①</span>
  <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 <code>CompletableDeferred</code> 本身就是一个 <code>Job</code> 的实现，它的构造可接受一个 <code>Job</code> 实例作为它的父协程，那么问题来了，这里并没有告诉它父协程究竟是谁，因此也就谈不上作用域的事儿了，这好像我们用 <code>GlobalScope.launch</code> 启动了一个协程一样。如果大家在 Android 当中使用 <code>MainScope</code>，那么同样因为前面说到的这个原因，导致 <code>CompletableDeferred</code> 没有办法被取消。</p><blockquote><p>@阿永 在公众号评论中提到这个问题，并提到了一个比较好的解决方案，下面我们为大家详细介绍。感谢 @阿永。</p></blockquote><p>说到这里我们再简单回顾下，作用域主要有 <code>GlobalScope</code>、<code>coroutineScope</code>、<code>supervisorScope</code>，对于取消，除了 <code>supervisorScope</code> 比较特别是单向取消，即父协程取消后子协程都取消，Android 中 <code>MainScope</code> 就是一个调度到 UI 线程的 <code>supervisorScope</code>；<code>coroutineScope</code> 的逻辑则是父子相互取消的逻辑；而 <code>GlobalScope</code> 会启动一个全新的作用域，与它外部隔离，内部遵循默认的协程作用域规则。</p><p>那么有没有办法解决这个问题呢？</p><p>直接解决还是比较困难的，因为 <code>CompletableDeferred</code> 构造所处的调用环境不是 suspend 函数，因而也没有办法拿到（很可能根本就没有！）父协程。</p><h3 id="_4-2-如何正确的将回调转换为协程" tabindex="-1"><a class="header-anchor" href="#_4-2-如何正确的将回调转换为协程" aria-hidden="true">#</a> 4.2 如何正确的将回调转换为协程</h3><p>前面我们提到既然 <code>adapt</code> 方法不是 suspend 方法，那么我们是不是应该在其他位置创建协程呢？</p><p>其实我们前面在讲 <code>getUserCoroutine</code> 的时候就不断为大家展示了如何将一个回调转换为协程调用的方法：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">getUserCoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> suspendCancellableCoroutine<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span> continuation <span class="token operator">-&gt;</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>suspendCancellableCoroutine</code> 跟最初我们提到的 <code>suspendCoroutine</code> 一样，都是要获取当前协程的 <code>Continuation</code> 实例，这实际上就相当于要继承当前协程的上下文，因此我们只需要在真正需要切换协程的时候再去做这个转换即可：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T <span class="token operator">:</span> Any<span class="token operator">&gt;</span> Call<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>
    <span class="token keyword">return</span> suspendCancellableCoroutine <span class="token punctuation">{</span> continuation <span class="token operator">-&gt;</span>
        <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> Callback<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">?</span><span class="token punctuation">,</span> response<span class="token operator">:</span> Response<span class="token operator">&lt;</span>T<span class="token operator">?</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                continuation<span class="token punctuation">.</span><span class="token function">resumeWith</span><span class="token punctuation">(</span>runCatching <span class="token punctuation">{</span> <span class="token comment">// ①</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>isSuccessful<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                            <span class="token operator">?:</span> <span class="token keyword">throw</span> <span class="token function">NullPointerException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Response body is null: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">response</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> <span class="token function">HttpException</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">,</span> t<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>continuation<span class="token punctuation">.</span>isCancelled<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token comment">// ②</span>
                continuation<span class="token punctuation">.</span><span class="token function">resumeWithException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

        continuation<span class="token punctuation">.</span><span class="token function">invokeOnCancellation</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>ex<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ③</span>
                <span class="token comment">//Ignore cancel exception </span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大家看着这段代码会不会很眼熟？这与我们 <code>getUserCoroutine</code> 的写法几乎如出一辙，不过有几处细节值得关注，我用数字标注了他们的位置：</p><ul><li>① 处 <code>runCatching</code> 可以将一段代码的运行结果或者抛出的异常封装到一个 <code>Result</code> 类型当中，Kotlin 1.3 开始新增了 <code>Continuation.resumeWith(Result)</code> 这个方法， 这个点比起我们前面的写法更具 Kotlin 风格。</li><li>② 处在异常抛出时，判断了是否已经被取消。实际上如果网络请求被取消，这个回调确实会被调到，那么由于取消的操作是协程的由 <code>Continuation</code> 的取消发起的，因此这时候没必要再调用 <code>continuation.resumeWithException(t)</code> 来将异常再抛回来了。尽管我们前面其实也提到过，这时候继续调用 <code>continuation.resumeWithException(t)</code> 也没有任何逻辑上的副作用，但性能上多少还是会有一些开销。</li><li>③ 处，尽管 <code>Call.cancel</code> 的调用比较安全，但网络环境和状态难免情况复杂，因此对异常进行捕获会让这段代码更加健壮。如果 <code>cancel</code> 抛异常而没有捕获的话，那么等同于协程体内部抛出异常，具体如何传播看所在作用域的相关定义了。</li></ul>`,34),d={href:"https://github.com/gildor/kotlin-coroutines-retrofit",target:"_blank",rel:"noopener noreferrer"},v=e(`<div class="language-gradle line-numbers-mode" data-ext="gradle"><pre class="language-gradle"><code>compile <span class="token string">&#39;ru.gildor.coroutines:kotlin-coroutines-retrofit:1.1.0&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个框架代码量很少，但经过各路 Kotlin 协程专家的锤炼，逻辑手法很细腻，值得大家学习。</p><h2 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结" aria-hidden="true">#</a> 5. 小结</h2><p>这篇文章我们从线程中断的概念切入，类比学习协程的取消，实际上大家就会发现这二者从逻辑上和场景上有多么的相似。接着我们将之前我们一直提到的回调转协程的例子进一步升级，支持取消，这样大家就可以轻易的将回调转变为协程的挂起调用了。最后我们还分析了一下 Retrofit 的协程扩展的一些问题和解决方法，这个例子也进一步可以引发我们对协程作用域以及如何将现有程序协程化的思考。</p><p>再稍微提一句，协程不是一个简单的东西，毕竟它的原理涉及到对操作系统调度、程序运行机制这样程序界毕竟原始的话题，但你说如果我对前面提到的这些都不是很熟悉或者根本没有接触过，是不是就要跟协程拜拜了呢，其实也不是，只不过如果你对这些都不熟悉，那么可能需要多加练习培养出感觉，而不必一开始就关注原理和细节，依样画葫芦一样可以用的很好，就像大家不知道 RxJava 原理一样可以用的很好一样，协程也可以做到这一点的。</p><p>当然，作为一个有追求的程序员，我们不止要会用，还要用得好，无论如何我们都需要知道来龙去脉，这其中涉及到的基础知识的欠缺也是需要尽快补充的，不能偷懒哈 ：）</p><h2 id="关于作者" tabindex="-1"><a class="header-anchor" href="#关于作者" aria-hidden="true">#</a> 关于作者</h2><p><strong>霍丙乾 bennyhuo</strong>，Google 开发者专家（Kotlin 方向）；<strong>《深入理解 Kotlin 协程》</strong> 作者（机械工业出版社，2020.6）；<strong>《深入实践 Kotlin 元编程》</strong> 作者（机械工业出版社，2023.8）；移动客户端工程师，先后就职于腾讯地图、猿辅导、腾讯视频。</p>`,8),m=n("li",null,"GitHub：https://github.com/bennyhuo",-1),b=n("li",null,"博客：https://www.bennyhuo.com",-1),g={href:"https://space.bilibili.com/28615855",target:"_blank",rel:"noopener noreferrer"},f=n("strong",null,"霍丙乾 bennyhuo",-1),h=n("li",null,[s("微信公众号："),n("strong",null,"霍丙乾 bennyhuo")],-1);function y(w,C){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("我在"),n("a",r,[s("破解 Kotlin 协程 - 入门篇"),t(a)]),s(" 提到了 Jake Wharton 大神为 Retrofit 写的 协程 Adapter，")]),k,n("p",null,[s("需要指出的是，这段代码片段源自 "),n("a",d,[s("gildor/kotlin-coroutines-retrofit"),t(a)]),s(" ，大家也可以直接添加依赖进行使用：")]),v,n("ul",null,[m,b,n("li",null,[s("bilibili："),n("a",g,[f,t(a)])]),h])])}const _=p(i,[["render",y],["__file","05-cancellation.html.vue"]]);export{_ as default};
