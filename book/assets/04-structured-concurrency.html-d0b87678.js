import{_ as p,X as t,Y as e,Z as n,a0 as s,$ as o,a1 as c,D as l}from"./framework-98842e7a.js";const i={},u=c(`<h1 id="_4-taskgroup-与结构化并发" tabindex="-1"><a class="header-anchor" href="#_4-taskgroup-与结构化并发" aria-hidden="true">#</a> 4. TaskGroup 与结构化并发</h1><blockquote><p>上一篇文章我们提到了结构化并发，这听上去很高级。</p></blockquote><h2 id="taskgroup-的基本用法" tabindex="-1"><a class="header-anchor" href="#taskgroup-的基本用法" aria-hidden="true">#</a> TaskGroup 的基本用法</h2><p>我们现在已经知道怎么在自己的程序里面调用异步函数了。</p><p>不难发现，调用异步函数的关键点是创建 Task 的实例。通过 Task 的构造器或者 detach 函数创建的 Task 实例都是顶级的，这意味着这些实例都需要单独管理。在真实的业务场景中，我们难免会创建很多 Task 实例来执行不同的异步任务，但这些任务之间往往都是存在关联的，因此我们绝大多数情况下更希望这些 Task 实例是作为一个或者几个整体来统一管理的。</p><p>这就需要 TaskGroup 了。</p><p>创建 TaskGroup 的方式非常简单，使用 <code>withTaskGroup(of:returning:body:)</code> 函数即可，它的完整定义如下：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">withTaskGroup</span><span class="token operator">&lt;</span><span class="token class-name">ChildTaskResult</span><span class="token punctuation">,</span> <span class="token class-name">GroupResult</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
    of childTaskResultType<span class="token punctuation">:</span> <span class="token class-name">ChildTaskResult</span><span class="token punctuation">.</span><span class="token keyword">Type</span><span class="token punctuation">,</span> 
    returning returnType<span class="token punctuation">:</span> <span class="token class-name">GroupResult</span><span class="token punctuation">.</span><span class="token keyword">Type</span> <span class="token operator">=</span> <span class="token class-name">GroupResult</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> 
    body<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">inout</span> <span class="token class-name">TaskGroup</span><span class="token operator">&lt;</span><span class="token class-name">ChildTaskResult</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">GroupResult</span>
<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">GroupResult</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它有三个参数，但实际上前两个其实就是泛型参数，其中</p><ul><li><code>ChildTaskResult</code> 表示这个 TaskGroup 内创建的 Task 的结果类型</li><li><code>GroupResult</code> TaskGroup 自身的结果类型</li></ul><p>后者其实也是第三个参数 body 的返回值类型。</p><p>注意到 <code>withTaskGroup</code> 是异步函数，它会在 TaskGroup 当中所有的子 Task 执行完之后再返回。我们可以在 body 当中向 TaskGroup 当中添加子 Task，用到 addTask 函数：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">public</span> <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">addTask</span><span class="token punctuation">(</span>
    priority<span class="token punctuation">:</span> _Concurrency<span class="token punctuation">.</span><span class="token class-name">TaskPriority</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> 
    operation<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token attribute atrule">@Sendable</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">ChildTaskResult</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中：</p><ul><li>priority 是当前任务的优先级</li><li>operation 就是任务的执行体</li></ul><p>尽管 <code>withTaskGroup</code> 会等待子 Task 执行完，但有些情况下我们希望在 body 当中就提前等待子 Task 的执行结果，这时候我们有两种做法：</p><ul><li>如果只关心子 Task 是否执行完，可以调用 TaskGroup 的 <code>waitForAll</code> 函数。不难想到，这也是一个异步函数。</li><li>更常见的情况是获取子 Task 的结果，这时候我们可以直接迭代 TaskGroup，或者调用 TaskGroup 的 <code>next</code> 函数来获取下一个已完成的子 Task 的结果。注意，获取的结果的顺序取决于子 Task 完成的顺序，而不是它们添加到 TaskGroup 当中的顺序。</li></ul><h2 id="一个结构化并发的简单示例" tabindex="-1"><a class="header-anchor" href="#一个结构化并发的简单示例" aria-hidden="true">#</a> 一个结构化并发的简单示例</h2><p>下面我们给大家看一个非常简单的异步分段计算的例子：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 定义一个计算 [min, max) 范围内整数的和的闭包，注意前闭后开</span>
<span class="token keyword">let</span> add <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>min<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> max<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token keyword">in</span>
    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> min<span class="token operator">..&lt;</span>max <span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> i
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum
<span class="token punctuation">}</span>

<span class="token keyword">let</span> seg <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">// 分段大小</span>
<span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">(</span><span class="token function">arc4random_uniform</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 产生一个随机数，下面计算 [0, n] 内的整数和</span>

<span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">withTaskGroup</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> returning<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> group <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token keyword">in</span>
    <span class="token comment">// 计算分段和</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token punctuation">(</span>n <span class="token operator">/</span> seg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        group<span class="token punctuation">.</span>addTask <span class="token punctuation">{</span> <span class="token function">add</span><span class="token punctuation">(</span>seg <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> seg <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 如果 n 不能被 seg 整除，计算剩余部分的和</span>
    <span class="token keyword">if</span> n <span class="token operator">%</span> seg <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        group<span class="token punctuation">.</span>addTask <span class="token punctuation">{</span>
            <span class="token function">add</span><span class="token punctuation">(</span>n <span class="token operator">-</span> n <span class="token operator">%</span> seg<span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 迭代 group 的子任务结果，汇总</span>
    <span class="token keyword">var</span> totalSum <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token keyword">await</span> result <span class="token keyword">in</span> group <span class="token punctuation">{</span>
        totalSum <span class="token operator">+=</span> result
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> totalSum
<span class="token punctuation">}</span>

<span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>withTaskGroup</code> 创建了一个 TaskGroup 实例，子 Task 的结果类型和 TaskGroup 的类型都是 Int，我们将 [0, n] 的整数按照 seg 进行分段，每段整数的和通过一个子 Task 来完成计算。</p><p>由于子 Task 的实例我们是无法直接拿到的，因此我们需要通过 TaskGroup 的实例来获取子任务的结果。通过上面的例子我们不难发现 group 是可以被迭代的，很自然的能想到 TaskGroup 有以下函数：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">public</span> <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">ChildTaskResult</span><span class="token operator">?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>并且实现了 AsyncSequence 协议：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">extension</span> <span class="token class-name">TaskGroup</span> <span class="token punctuation">:</span> _Concurrency<span class="token punctuation">.</span><span class="token class-name">AsyncSequence</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>AsyncSequence 与 Sequence 的不同之处在于它的迭代器的 next 函数是异步函数，这就与前面 TaskGroup 的 next 函数对应上了。</p><p>计算 totalSum 除了使用经典的 for 循环以外，我们也可以使用 reduce：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> totalSum <span class="token operator">=</span> <span class="token keyword">await</span> group<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> acc<span class="token punctuation">,</span> i <span class="token keyword">in</span>
    acc <span class="token operator">+</span> i
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 reduce 的第一个参数是初始值，第二个参数是个闭包，它的参数 acc 是累积的结果，i 是当前的元素，返回值则会作为下一个元素调用时的 acc 传入，最终得到的就是所有子 Task 的结果的和。</p><h2 id="会抛异常的-taskgroup" tabindex="-1"><a class="header-anchor" href="#会抛异常的-taskgroup" aria-hidden="true">#</a> 会抛异常的 TaskGroup</h2><p>大家可能发现了，我们前面创建的 TaskGroup 里面的子 Task 不能抛异常。因此我们很自然的想到还有一套可以抛异常的 TaskGroup 的函数：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">public</span> <span class="token keyword">func</span> <span class="token function-definition function">withThrowingTaskGroup</span><span class="token operator">&lt;</span><span class="token class-name">ChildTaskResult</span><span class="token punctuation">,</span> <span class="token class-name">GroupResult</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
    of childTaskResultType<span class="token punctuation">:</span> <span class="token class-name">ChildTaskResult</span><span class="token punctuation">.</span><span class="token keyword">Type</span><span class="token punctuation">,</span> 
    returning returnType<span class="token punctuation">:</span> <span class="token class-name">GroupResult</span><span class="token punctuation">.</span><span class="token keyword">Type</span> <span class="token operator">=</span> <span class="token class-name">GroupResult</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> 
    body<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">inout</span> _Concurrency<span class="token punctuation">.</span><span class="token class-name">ThrowingTaskGroup</span><span class="token operator">&lt;</span><span class="token class-name">ChildTaskResult</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">GroupResult</span>
<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">rethrows</span> <span class="token operator">-&gt;</span> <span class="token class-name">GroupResult</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过它创建的 TaskGroup 的类型是：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token attribute atrule">@frozen</span> <span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">ThrowingTaskGroup</span><span class="token operator">&lt;</span><span class="token class-name">ChildTaskResult</span><span class="token punctuation">,</span> <span class="token class-name">Failure</span><span class="token operator">&gt;</span> <span class="token keyword">where</span> <span class="token class-name">Failure</span> <span class="token punctuation">:</span> <span class="token class-name">Error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ThrowingTaskGroup 与 TaskGroup 的本质是一致的，只不过 ThrowingTaskGroup 的所有成员函数都增加了 throws 关键字。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token omit keyword">_</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token function">withThrowingTaskGroup</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> group <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token keyword">in</span>
        <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>nanoseconds<span class="token punctuation">:</span> <span class="token number">1000000</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;OK&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到 withThrowingTaskGroup 是 rethrows 的，如果闭包参数里面有异常抛出，调用时也需要做异常处理。例子当中调用到了 Task 的 sleep 函数，需要大家注意的是 Task 有两个 sleep 函数，带 nanoseconds 的这个版本是会抛异常的：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// 参数没有 label，没有标记为 throws，调用时不需要处理异常</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">sleep</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> duration<span class="token punctuation">:</span> <span class="token class-name">UInt64</span><span class="token punctuation">)</span> <span class="token keyword">async</span>

<span class="token comment">// 参数有 label，标记为 throws</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">sleep</span><span class="token punctuation">(</span>nanoseconds duration<span class="token punctuation">:</span> <span class="token class-name">UInt64</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此这里需要使用 <code>withThrowingTaskGroup</code> 来做异常的传递。</p><p>除抛异常这个点以外，ThrowingTaskGroup 的用法与 TaskGroup 完全一致。</p><h2 id="子-task-的异常处理" tabindex="-1"><a class="header-anchor" href="#子-task-的异常处理" aria-hidden="true">#</a> 子 Task 的异常处理</h2><p>在 TaskGroup 当中，子 Task 如果抛出了异常，当外部调用者试图通过 TaskGroup 实例获取它的结果时也会抛出这个异常。需要注意的是，由于子 Task 结果的获取顺序取决于实际 Task 的完成时间，因此获取结果时需要注意对单个 Task 的结果进行异常捕获，以免影响其他 Task 的结果：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">withThrowingTaskGroup</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> group <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token keyword">in</span>
    group<span class="token punctuation">.</span>addTask <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500_000_000</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token punctuation">}</span>

    group<span class="token punctuation">.</span>addTask <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000_000_000</span><span class="token punctuation">)</span>
        <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token function">errorThrown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>

    group<span class="token punctuation">.</span>addTask <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1500_000_000</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>group<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">try</span> <span class="token keyword">await</span> group<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;Nil&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">100</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子当中，返回 0 的子 Task 抛了异常，我们在试图遍历 group 时就会遇到这个异常：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-1
Runtime Error
1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而其他的子 Task 的结果是可以正常获取的。可见 TaskGroup 当中的 Task 抛异常并不会影响其他 Task 的运行。</p><h2 id="不要把-taskgroup-的实例泄漏到外部" tabindex="-1"><a class="header-anchor" href="#不要把-taskgroup-的实例泄漏到外部" aria-hidden="true">#</a> 不要把 TaskGroup 的实例泄漏到外部</h2><p>从前面的例子我们大致可以看出，Swift 的 TaskGroup 的 API 设计还是非常谨慎的，TaskGroup 的实例只有在 <code>withTaskGroup</code> 的闭包参数当中使用，外部没有办法直接获取。</p><p>那有没有办法能让 TaskGroup 的实例逃逸出这个闭包呢？我们来做一点儿小尝试：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">var</span> taskGroup<span class="token punctuation">:</span> <span class="token class-name">TaskGroup</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token operator">&gt;?</span>
<span class="token omit keyword">_</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">withTaskGroup</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>group<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token keyword">in</span>
    taskGroup <span class="token operator">=</span> group
    group<span class="token punctuation">.</span>addTask <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
<span class="token punctuation">}</span>

<span class="token keyword">guard</span> <span class="token keyword">let</span> group <span class="token operator">=</span> taskGroup <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;group is nil&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token keyword">await</span> i <span class="token keyword">in</span> group <span class="token punctuation">{</span> 
    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在闭包外面定义一个变量 taskGroup，在闭包里面给 taskGroup 赋值。接下来我们在外面尝试访问以下 taskGroup 的子任务结果，运行之后就会发现：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Process finished with exit code 133 (interrupted by signal 5: SIGTRAP)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>错误发生的位置就是这里： <code>for await i in group { ... }</code>。</p><p>为什么会出现异常呢？我们前面提到过， <code>withTaskGroup</code> 会在所有的子 Task 执行完以后再返回，这是否意味着 TaskGroup 的实例也会在此时被销毁呢？</p><p>遇到这种问题，我们只需要翻阅一下 swift 的源码：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">public</span> <span class="token keyword">func</span> <span class="token function-definition function">withTaskGroup</span><span class="token operator">&lt;</span><span class="token class-name">ChildTaskResult</span><span class="token punctuation">,</span> <span class="token class-name">GroupResult</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
    of childTaskResultType<span class="token punctuation">:</span> <span class="token class-name">ChildTaskResult</span><span class="token punctuation">.</span><span class="token keyword">Type</span><span class="token punctuation">,</span>
    returning returnType<span class="token punctuation">:</span> <span class="token class-name">GroupResult</span><span class="token punctuation">.</span><span class="token keyword">Type</span> <span class="token operator">=</span> <span class="token class-name">GroupResult</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span>
    body<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">inout</span> <span class="token class-name">TaskGroup</span><span class="token operator">&lt;</span><span class="token class-name">ChildTaskResult</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">GroupResult</span>
<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">GroupResult</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> _group <span class="token operator">=</span> <span class="token class-name">Builtin</span><span class="token punctuation">.</span><span class="token function">createTaskGroup</span><span class="token punctuation">(</span><span class="token class-name">ChildTaskResult</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> group <span class="token operator">=</span> <span class="token class-name">TaskGroup</span><span class="token operator">&lt;</span><span class="token class-name">ChildTaskResult</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>group<span class="token punctuation">:</span> _group<span class="token punctuation">)</span>

    <span class="token comment">// Run the withTaskGroup body.</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">body</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>group<span class="token punctuation">)</span>

    <span class="token keyword">await</span> group<span class="token punctuation">.</span><span class="token function">awaitAllRemainingTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token class-name">Builtin</span><span class="token punctuation">.</span><span class="token function">destroyTaskGroup</span><span class="token punctuation">(</span>_group<span class="token punctuation">)</span>
    <span class="token keyword">return</span> result  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，withTaskGroup 返回前会先等待所有的子 Task 执行完毕，然后将 TaskGroup 销毁。因此将 TaskGroup 的实例泄漏到外部没有任何意义。</p><h2 id="不要在子-task-当中修改-taskgroup" tabindex="-1"><a class="header-anchor" href="#不要在子-task-当中修改-taskgroup" aria-hidden="true">#</a> 不要在子 Task 当中修改 TaskGroup</h2><p>TaskGroup 泄漏到外部是危险的，这其实很容易想到。那么在子 Task 当中呢？</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">await</span> <span class="token function">withTaskGroup</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token class-name">Void</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>group<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span> <span class="token keyword">in</span>
    group<span class="token punctuation">.</span>addTask <span class="token punctuation">{</span>
        group<span class="token punctuation">.</span>addTask <span class="token punctuation">{</span> <span class="token comment">// error!</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;inner task&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你尝试在子 Task 当中去修改 group（addTask 是 mutating func），你会得到这样的错误：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Mutation of captured parameter &#39;group&#39; in concurrently-executing code
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>正如前面提到不能把 TaskGroup 的实例泄漏到外面一样，它也同样不能泄漏到子 Task 的执行体当中。道理也很简单，子 Task 的执行体可能会被调度到不同的线程上，这样就导致对 TaskGroup 的修改是并发的，不安全。</p><h2 id="async-let" tabindex="-1"><a class="header-anchor" href="#async-let" aria-hidden="true">#</a> async let</h2><p>除了使用 TaskGroup 添加子 Task 的方式来构造结构化并发以外，我们还有一种比较便捷的方式，那就是使用 async let。async let 一方面可以让子 Task 的创建和结果的返回变得更加简单，另一方面也可以解决子 Task 的结果不好定位的问题（因为遍历 TaskGroup 时子 Task 的结果返回顺序不确定）。</p><p>下面我们给出一个简单的例子来说明这个问题：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">struct</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span>
    <span class="token keyword">let</span> info<span class="token punctuation">:</span> <span class="token class-name">String</span>
    <span class="token keyword">let</span> followers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> projects<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义一个数据结构 User，我们现在需要通过访问网络情况来构造这样一个实例，其中：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">getUserInfo</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> user<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function-definition function">getFollowers</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> user<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function-definition function">getProjects</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> user<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上三个函数将发送异步网络请求去获取对应字段的数据。如果使用 TaskGroup，代码写起来将会比较复杂：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">enum</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token function">info</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token function">followers</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token function">projects</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function-definition function">getUser</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">withTaskGroup</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> group <span class="token keyword">in</span>
        group<span class="token punctuation">.</span>addTask <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">await</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        group<span class="token punctuation">.</span>addTask <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token function">followers</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">await</span> <span class="token function">getFollowers</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        group<span class="token punctuation">.</span>addTask <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token function">projects</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">await</span> <span class="token function">getProjects</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">var</span> info<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span>
        <span class="token keyword">var</span> followers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span>
        <span class="token keyword">var</span> projects<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span>
        <span class="token keyword">for</span> <span class="token keyword">await</span> r <span class="token keyword">in</span> group <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> r <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">let</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
                info <span class="token operator">=</span> value
            <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">followers</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">let</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
                followers <span class="token operator">=</span> value
            <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">projects</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">let</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
                projects <span class="token operator">=</span> value
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> name<span class="token punctuation">,</span> info<span class="token punctuation">:</span> info <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> followers<span class="token punctuation">:</span> followers <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> projects<span class="token punctuation">:</span> projects <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面多次提到对 TaskGroup 进行遍历获取子 Task 的结果时存在顺序的不确定性，为了解决这个问题我们定义了一个枚举 Result 将子 Task 的结果与枚举值进行绑定，方便后续读取结果。这个过程异常繁琐，且引入额外的类型实现结果的绑定让问题变得更加复杂。</p><p>如果使用 async let，这个问题就会变得非常简单：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">getUser</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">async</span> <span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    <span class="token keyword">async</span> <span class="token keyword">let</span> followers <span class="token operator">=</span> <span class="token function">getFollowers</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    <span class="token keyword">async</span> <span class="token keyword">let</span> projects <span class="token operator">=</span> <span class="token function">getProjects</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> name<span class="token punctuation">,</span> info<span class="token punctuation">:</span> <span class="token keyword">await</span> info<span class="token punctuation">,</span> followers<span class="token punctuation">:</span> <span class="token keyword">await</span> followers<span class="token punctuation">,</span> projects<span class="token punctuation">:</span> <span class="token keyword">await</span> projects<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>async let 会创建一个子 Task 来完成后面的调用，并且把结果绑定到对应的变量当中。以 info 为例，当我们需要读取其结果时，只需要 await info 即可，这样就大大降低了我们获取异步子 Task 的结果的复杂度。</p><p>另外稍微提一句的是，在 Swift 当中，async 函数的调用必须使用 await 来等待这个限制会强制我们等待异步函数的结果，如果希望同时触发多个异步函数的调用，async let 能解决的问题也是有限的。例如我们想要并发获取多个 User 的数据，需要实现以下函数：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">getUsers</span><span class="token punctuation">(</span>names<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token class-name">User</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们可以基于前面的 getUser 来实现这个函数，为了保证 User 数据的获取的并发性，我们需要同时创建多个 Task 来完成请求：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">getUsers</span><span class="token punctuation">(</span>names<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token class-name">User</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">withTaskGroup</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> group <span class="token keyword">in</span>
        <span class="token keyword">for</span> name <span class="token keyword">in</span> names <span class="token punctuation">{</span>
            group<span class="token punctuation">.</span>addTask <span class="token punctuation">{</span>
                <span class="token keyword">await</span> <span class="token function">getUser</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> name<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token keyword">await</span> group<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>into<span class="token punctuation">:</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token class-name">User</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>partialResult<span class="token punctuation">,</span> user<span class="token punctuation">)</span> <span class="token keyword">in</span>
            partialResult<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种情况下 async let 就显得有点儿力不从心了。</p><p>更进一步，如果这里要求返回的 User 跟传入的 name 能够在顺序上一一对应，使用 TaskGroup 实现就会比较麻烦，因为 TaskGroup 的结果顺序是子 Task 完成的顺序。</p><p>实际上，保证结果的顺序与 Task 的添加顺序一致是有实际需求的，我们也可以使用一组 Task 而不是 TaskGroup 来实现这个需求：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">getUsers</span><span class="token punctuation">(</span>names<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token class-name">User</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> tasks <span class="token operator">=</span> names<span class="token punctuation">.</span>map <span class="token punctuation">{</span> name <span class="token keyword">in</span>
        <span class="token class-name">Task</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">User</span> <span class="token keyword">in</span>
            <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">getUser</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> name<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token function">withTaskCancellationHandler</span><span class="token punctuation">(</span>operation<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token class-name">User</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> task <span class="token keyword">in</span> tasks <span class="token punctuation">{</span>
            users<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">try</span> <span class="token keyword">await</span> task<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> users
    <span class="token punctuation">}</span><span class="token punctuation">,</span> onCancel<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        tasks<span class="token punctuation">.</span>forEach <span class="token punctuation">{</span> task <span class="token keyword">in</span> task<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于这时候我们创建的 Task 都是不隶属于 TaskGroup 的（即非结构化并发），此时我们要小心处理 Task 取消的情况，以免出现内存泄漏和逻辑错误。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本文我们简单介绍了一下 TaskGroup 的用法，大家可以基于这些内容开始做一些简单的尝试了。结构化并发当中还有一些重要的概念我们将在接下来的几篇文章当中逐步介绍。</p><h2 id="关于作者" tabindex="-1"><a class="header-anchor" href="#关于作者" aria-hidden="true">#</a> 关于作者</h2><p><strong>霍丙乾 bennyhuo</strong>，Google 开发者专家（Kotlin 方向）；<strong>《深入理解 Kotlin 协程》</strong> 作者（机械工业出版社，2020.6）；<strong>《深入实践 Kotlin 元编程》</strong> 作者（机械工业出版社，2023.8）；移动客户端工程师，先后就职于腾讯地图、猿辅导、腾讯视频。</p>`,88),k=n("li",null,"GitHub：https://github.com/bennyhuo",-1),r=n("li",null,"博客：https://www.bennyhuo.com",-1),d={href:"https://space.bilibili.com/28615855",target:"_blank",rel:"noopener noreferrer"},v=n("strong",null,"霍丙乾 bennyhuo",-1),m=n("li",null,[s("微信公众号："),n("strong",null,"霍丙乾 bennyhuo")],-1);function w(b,y){const a=l("ExternalLinkIcon");return t(),e("div",null,[u,n("ul",null,[k,r,n("li",null,[s("bilibili："),n("a",d,[v,o(a)])]),m])])}const f=p(i,[["render",w],["__file","04-structured-concurrency.html.vue"]]);export{f as default};
