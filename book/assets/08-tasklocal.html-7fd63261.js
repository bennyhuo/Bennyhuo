import{_ as p,X as o,Y as l,Z as n,a0 as s,$ as t,a1 as e,D as c}from"./framework-98842e7a.js";const i={},u=e(`<h1 id="_8-tasklocal" tabindex="-1"><a class="header-anchor" href="#_8-tasklocal" aria-hidden="true">#</a> 8. TaskLocal</h1><blockquote><p>如果我想要定义一个变量，它的值只在 Task 内部共享，怎么做到呢？</p></blockquote><h2 id="tasklocal-值的定义和使用" tabindex="-1"><a class="header-anchor" href="#tasklocal-值的定义和使用" aria-hidden="true">#</a> TaskLocal 值的定义和使用</h2><p>TaskLocal 值就是 Task 私有的值，不同的 Task 对于这个变量的访问将得到不同的结果。</p><p>下面我们给出示例演示如何定义一个 TaskLocal 值：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>
    <span class="token attribute atrule">@TaskLocal</span>
    <span class="token keyword">static</span> <span class="token keyword">var</span> tag<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;default&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TaskLocal 值必须定义为静态的存储属性，并使用 TaskLocal 这个属性包装器（property wrapper）来包装。TaskLocal 值也受限于属性包装器的支持范围，不能定义为顶级属性。</p><p>变量 tag 的初始值为 <code>default</code>，属性包装器 TaskLocal 的构造器会接收这个值并存起来备用：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TaskLocal</span><span class="token operator">&lt;</span><span class="token class-name">Value</span><span class="token punctuation">:</span> <span class="token class-name">Sendable</span><span class="token operator">&gt;</span><span class="token punctuation">:</span> <span class="token class-name">Sendable</span><span class="token punctuation">,</span> <span class="token class-name">CustomStringConvertible</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> defaultValue<span class="token punctuation">:</span> <span class="token class-name">Value</span>

  <span class="token keyword">public</span> <span class="token keyword">init</span><span class="token punctuation">(</span>wrappedValue defaultValue<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">self</span><span class="token punctuation">.</span>defaultValue <span class="token operator">=</span> defaultValue
  <span class="token punctuation">}</span>
  <span class="token operator">..</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>了解属性包装器的读者应该也能想到初始值的定义还可以写：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>
    <span class="token attribute atrule">@TaskLocal</span><span class="token punctuation">(</span>wrappedValue<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;default&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">static</span> <span class="token keyword">var</span> tag<span class="token punctuation">:</span> <span class="token class-name">String</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过观察 TaskLocal 的定义，我们也发现它对于被包装的类型是有要求的，即要实现 Sendable 协议。</p>`,12),k={href:"https://www.bennyhuo.com/2020/05/08/kotlin-swift-property-delegate/",target:"_blank",rel:"noopener noreferrer"},r=e(`<p>了解了定义之后，接下来看用法。</p><p>首先要写入值，我们只需要调用属性包装器的 withValue 函数，它的声明如下：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token keyword">func</span> <span class="token function-definition function">withValue</span><span class="token operator">&lt;</span><span class="token class-name">R</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
    <span class="token omit keyword">_</span> valueDuringOperation<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> 
    operation<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">R</span><span class="token punctuation">,</span> 
    file<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token literal constant">#file</span><span class="token punctuation">,</span> 
    line<span class="token punctuation">:</span> <span class="token class-name">UInt</span> <span class="token operator">=</span> <span class="token literal constant">#line</span>
<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">rethrows</span> <span class="token operator">-&gt;</span> <span class="token class-name">R</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用示例如下：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">await</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span>$tag<span class="token punctuation">.</span><span class="token function">withValue</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;MyTask&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">logWithTag</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;in my task&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 $tag 就是 tag 的属性包装器的 projectedValue，这个值正是 TaskLocal 这个属性包装器对象本身。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TaskLocal</span><span class="token operator">&lt;</span><span class="token class-name">Value</span><span class="token punctuation">:</span> <span class="token class-name">Sendable</span><span class="token operator">&gt;</span><span class="token punctuation">:</span> <span class="token class-name">Sendable</span><span class="token punctuation">,</span> <span class="token class-name">CustomStringConvertible</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token keyword">public</span> <span class="token keyword">var</span> projectedValue<span class="token punctuation">:</span> <span class="token class-name">TaskLocal</span><span class="token operator">&lt;</span><span class="token class-name">Value</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">set</span> <span class="token punctuation">{</span>
            <span class="token operator">...</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>withValue 有两个参数，一个是要绑定给 tag 的值，即 <code>MyTask</code>；另一个就是一个闭包，这个绑定的值只有在这个闭包当中有效，一旦闭包执行结束，tag 绑定的值的生命周期也就结束了。</p><p>接下来我们尝试去读取它：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">logWithTag</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> message<span class="token punctuation">:</span> <span class="token keyword">Any</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;(</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token class-name">Logger</span><span class="token punctuation">.</span>tag</span><span class="token interpolation-punctuation punctuation">)</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">message</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取的方式就显得普通而又枯燥了。写法非常直接，不过大家要明白，这个读的行为实际上是通过 TaskLocal 属性包装器完成的。</p><p>作为对比，我们给出一个稍微完整的例子：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">await</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span>$tag<span class="token punctuation">.</span><span class="token function">withValue</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;MyTask&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">logWithTag</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;in withValue&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">await</span> <span class="token function">logWithTag</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;out of withValue&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token punctuation">(</span><span class="token class-name">MyTask</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">withValue</span>
<span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">:</span> out of withValue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="task-对于-tasklocal-的继承" tabindex="-1"><a class="header-anchor" href="#task-对于-tasklocal-的继承" aria-hidden="true">#</a> Task 对于 TaskLocal 的继承</h2><p>上一篇文章当中我们通过示例演示了 <code>init</code> 和 <code>detach</code> 构造的 Task 实例对 actor 上下文的继承，这次我们给大家再演示一下对 TaskLocal 的继承，以进一步加深大家的理解：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">await</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span>$tag<span class="token punctuation">.</span><span class="token function">withValue</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;MyTask&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token function">logWithTag</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Task.init&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span>value

    <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span>detached <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token function">logWithTag</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Task.detached&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span>value
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子相比之前的调度器的例子就更显得普通而又枯燥了，程序输出如下：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token punctuation">(</span><span class="token class-name">MyTask</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token keyword">init</span>
<span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">Task</span><span class="token punctuation">.</span>detached
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，通过 <code>detached</code> 创建的 Task 实例可谓是“六亲不认”，不仅不继承 actor 的上下文，也对 TaskLocal 不管不顾。另外不难想到的是，Swift 并没有提供修改外部 TaskLocal 值的 API，因此外部的 TaskLocal 值只能被继承，不能被修改。</p><h2 id="深入探查-tasklocal-的存储方式" tabindex="-1"><a class="header-anchor" href="#深入探查-tasklocal-的存储方式" aria-hidden="true">#</a> 深入探查 TaskLocal 的存储方式</h2><p>TaskLocal 值虽然看起来就是个静态存储属性，但它的值实际上是存储在 Task 相关的内存当中的。它的读写性能自然也与它的存储方式有关，因此为了确保能够正确合理的使用 TaskLocal，我们有必要了解一下它究竟是如何存储的。</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TaskLocal</span><span class="token operator">&lt;</span><span class="token class-name">Value</span><span class="token punctuation">:</span> <span class="token class-name">Sendable</span><span class="token operator">&gt;</span><span class="token punctuation">:</span> <span class="token class-name">Sendable</span><span class="token punctuation">,</span> <span class="token class-name">CustomStringConvertible</span> <span class="token punctuation">{</span>
  <span class="token operator">..</span>

  <span class="token comment">// 每一个变量唯一，用于查找值的 key</span>
  <span class="token keyword">var</span> key<span class="token punctuation">:</span> <span class="token class-name">Builtin</span><span class="token punctuation">.</span><span class="token class-name">RawPointer</span> <span class="token punctuation">{</span>
    <span class="token function">unsafeBitCast</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token class-name">Builtin</span><span class="token punctuation">.</span><span class="token class-name">RawPointer</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 读取 TaskLocal 值的值时调用该函数</span>
  <span class="token comment">// 通过 _taskLocalValueGet 到 Task 实例当中查找对应的值</span>
  <span class="token comment">// 如果没有找到，则返回 defaultValue，即初始值</span>
  <span class="token keyword">public</span> <span class="token keyword">func</span> <span class="token function-definition function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Value</span> <span class="token punctuation">{</span>
    <span class="token keyword">guard</span> <span class="token keyword">let</span> rawValue <span class="token operator">=</span> <span class="token function">_taskLocalValueGet</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">.</span>defaultValue
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> storagePtr <span class="token operator">=</span>
        rawValue<span class="token punctuation">.</span><span class="token function">bindMemory</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> capacity<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token class-name">UnsafeMutablePointer</span><span class="token operator">&lt;</span><span class="token class-name">Value</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">mutating</span><span class="token punctuation">:</span> storagePtr<span class="token punctuation">)</span><span class="token punctuation">.</span>pointee
  <span class="token punctuation">}</span>

  <span class="token attribute atrule">@discardableResult</span>
  <span class="token keyword">public</span> <span class="token keyword">func</span> <span class="token function-definition function">withValue</span><span class="token operator">&lt;</span><span class="token class-name">R</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> valueDuringOperation<span class="token punctuation">:</span> <span class="token class-name">Value</span><span class="token punctuation">,</span> operation<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">R</span><span class="token punctuation">,</span>
                           file<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token literal constant">#file</span><span class="token punctuation">,</span> line<span class="token punctuation">:</span> <span class="token class-name">UInt</span> <span class="token operator">=</span> <span class="token literal constant">#line</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">rethrows</span> <span class="token operator">-&gt;</span> <span class="token class-name">R</span> <span class="token punctuation">{</span>
    <span class="token function">_checkIllegalTaskLocalBindingWithinWithTaskGroup</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span> file<span class="token punctuation">,</span> line<span class="token punctuation">:</span> line<span class="token punctuation">)</span>

    <span class="token comment">// 写入值</span>
    <span class="token function">_taskLocalValuePush</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> value<span class="token punctuation">:</span> valueDuringOperation<span class="token punctuation">)</span>
    <span class="token keyword">defer</span> <span class="token punctuation">{</span> 
        <span class="token comment">// 确保在 withValue 退出的时候将值释放掉</span>
        <span class="token function">_taskLocalValuePop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候我们注意到有几个关键的函数，它们的定义如下：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token attribute atrule">@_silgen_name</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;swift_task_localValuePush&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function-definition function">_taskLocalValuePush</span><span class="token operator">&lt;</span><span class="token class-name">Value</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
  key<span class="token punctuation">:</span> <span class="token class-name">Builtin</span><span class="token punctuation">.</span><span class="token class-name">RawPointer</span><span class="token comment">/*: Key*/</span><span class="token punctuation">,</span>
  value<span class="token punctuation">:</span> __owned <span class="token class-name">Value</span>
<span class="token punctuation">)</span> <span class="token comment">// where Key: TaskLocal</span>

<span class="token attribute atrule">@_silgen_name</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;swift_task_localValuePop&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function-definition function">_taskLocalValuePop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token attribute atrule">@_silgen_name</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;swift_task_localValueGet&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function-definition function">_taskLocalValueGet</span><span class="token punctuation">(</span>
  key<span class="token punctuation">:</span> <span class="token class-name">Builtin</span><span class="token punctuation">.</span><span class="token class-name">RawPointer</span><span class="token comment">/*Key*/</span>
<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UnsafeMutableRawPointer</span><span class="token operator">?</span> <span class="token comment">// where Key: TaskLocal</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 _silgen_name 的值，我们可以找到他们在 C++ 当中的定义，以 <code>_taskLocalValueGet</code> 为例，我们给出 <code>swift_task_localValueGet</code> 的代码：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">SWIFT_CC</span><span class="token punctuation">(</span>swift<span class="token punctuation">)</span>
<span class="token keyword">static</span> OpaqueValue<span class="token operator">*</span> <span class="token function">swift_task_localValueGetImpl</span><span class="token punctuation">(</span><span class="token keyword">const</span> HeapObject <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>AsyncTask <span class="token operator">*</span>task <span class="token operator">=</span> <span class="token function">swift_task_getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从当前 Task 的本地存储当中读取值，AsyncTask 实际上就是 C++ 层当中 Task 对应的类型</span>
    <span class="token keyword">return</span> task<span class="token operator">-&gt;</span><span class="token function">localValueGet</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AsyncTask::localValueGet</code> 本质上调用的就是 <code>TaskLocal::Storage::getValue(AsyncTask *,const HeapObject *)</code>，我们同样可以找到它的实现：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>OpaqueValue<span class="token operator">*</span> TaskLocal<span class="token double-colon punctuation">::</span><span class="token class-name">Storage</span><span class="token double-colon punctuation">::</span><span class="token function">getValue</span><span class="token punctuation">(</span>AsyncTask <span class="token operator">*</span>task<span class="token punctuation">,</span>
                                          <span class="token keyword">const</span> HeapObject <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">assert</span><span class="token punctuation">(</span>key <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;TaskLocal key must not be null.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">auto</span> item <span class="token operator">=</span> head<span class="token punctuation">;</span>
  <span class="token comment">// 遍历以 head 为头节点的链表</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 比较 key，直到找到对应的值</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token operator">-&gt;</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> item<span class="token operator">-&gt;</span><span class="token function">getStoragePtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    item <span class="token operator">=</span> item<span class="token operator">-&gt;</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，查找过程其实就是链表的遍历查找，时间复杂度为 O(n)。</p><p>我们再稍微观察一下插入和删除的代码：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> TaskLocal<span class="token double-colon punctuation">::</span><span class="token class-name">Storage</span><span class="token double-colon punctuation">::</span><span class="token function">pushValue</span><span class="token punctuation">(</span>AsyncTask <span class="token operator">*</span>task<span class="token punctuation">,</span>
                                   <span class="token keyword">const</span> HeapObject <span class="token operator">*</span>key<span class="token punctuation">,</span>
                                   <span class="token comment">/* +1 */</span> OpaqueValue <span class="token operator">*</span>value<span class="token punctuation">,</span>
                                   <span class="token keyword">const</span> Metadata <span class="token operator">*</span>valueType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">auto</span> item <span class="token operator">=</span> <span class="token class-name">Item</span><span class="token double-colon punctuation">::</span><span class="token function">createLink</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> key<span class="token punctuation">,</span> valueType<span class="token punctuation">)</span><span class="token punctuation">;</span>
  valueType<span class="token operator">-&gt;</span><span class="token function">vw_initializeWithTake</span><span class="token punctuation">(</span>item<span class="token operator">-&gt;</span><span class="token function">getStoragePtr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  head <span class="token operator">=</span> item<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> TaskLocal<span class="token double-colon punctuation">::</span><span class="token class-name">Storage</span><span class="token double-colon punctuation">::</span><span class="token function">popValue</span><span class="token punctuation">(</span>AsyncTask <span class="token operator">*</span>task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">auto</span> old <span class="token operator">=</span> head<span class="token punctuation">;</span>
  head <span class="token operator">=</span> head<span class="token operator">-&gt;</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  old<span class="token operator">-&gt;</span><span class="token function">destroy</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> head <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不难发现这实际上就是一个采用头插法的单链表。为什么选择这样的设计呢？</p><p>显然，绝大多数情况下 TaskLocal 值的数量都不会很多，同时插入的值只在 withValue 函数范围内有效也使得绝大多数查找的值都排在链表前面，因此线性查找的效率并不会存在性能问题。</p><p>而链表的结构也使得增删节点非常容易，使用头插法使得 withValue 函数退出时释放销毁对应的值也变得非常容易，时间复杂度只需要 O(1)。</p><p>另外，使用单链表来存储 TaskLocal 值还有一个好处，那就是变量遮蔽，例如：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">await</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span>$tag<span class="token punctuation">.</span><span class="token function">withValue</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Task1&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">logWithTag</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span>$tag<span class="token punctuation">.</span><span class="token function">withValue</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Task2&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token function">logWithTag</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">await</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span>$tag<span class="token punctuation">.</span><span class="token function">withValue</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Task3&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">await</span> <span class="token function">logWithTag</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;3&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">await</span> <span class="token function">logWithTag</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;22&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">await</span> <span class="token function">logWithTag</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;11&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token punctuation">(</span><span class="token class-name">Task1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">1</span>
<span class="token punctuation">(</span><span class="token class-name">Task2</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">2</span>
<span class="token punctuation">(</span><span class="token class-name">Task3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">3</span>
<span class="token punctuation">(</span><span class="token class-name">Task2</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">22</span>
<span class="token punctuation">(</span><span class="token class-name">Task1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单总结一下，TaskLocal 值是存在链表当中的，我们在使用过程中应当避免使用过多的 TaskLocal 值，也应该适当地减少对 TaskLocal 值的访问次数，以避免性能上最坏的情况出现。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本文我们对 TaskLocal 值的使用和实现机制做了剖析。</p><h2 id="关于作者" tabindex="-1"><a class="header-anchor" href="#关于作者" aria-hidden="true">#</a> 关于作者</h2><p><strong>霍丙乾 bennyhuo</strong>，Google 开发者专家（Kotlin 方向）；<strong>《深入理解 Kotlin 协程》</strong> 作者（机械工业出版社，2020.6）；<strong>《深入实践 Kotlin 元编程》</strong> 作者（机械工业出版社，2023.8）；移动客户端工程师，先后就职于腾讯地图、猿辅导、腾讯视频。</p>`,45),d=n("li",null,"GitHub：https://github.com/bennyhuo",-1),v=n("li",null,"博客：https://www.bennyhuo.com",-1),m={href:"https://space.bilibili.com/28615855",target:"_blank",rel:"noopener noreferrer"},b=n("strong",null,"霍丙乾 bennyhuo",-1),g=n("li",null,[s("微信公众号："),n("strong",null,"霍丙乾 bennyhuo")],-1);function w(f,y){const a=c("ExternalLinkIcon");return o(),l("div",null,[u,n("blockquote",null,[n("p",null,[s("有关 Swift 属性包装器的介绍，可以参考我之前的一篇文章："),n("a",k,[s("Kotlin 的 Property Delegate 与 Swift 的 Property Wrapper"),t(a)]),s("。")])]),r,n("ul",null,[d,v,n("li",null,[s("bilibili："),n("a",m,[b,t(a)])]),g])])}const T=p(i,[["render",w],["__file","08-tasklocal.html.vue"]]);export{T as default};
