import{_ as t,X as o,Y as p,Z as n,a0 as s,$ as e,a1 as c,D as i}from"./framework-98842e7a.js";const l={},u=c(`<h1 id="_4-异常处理篇" tabindex="-1"><a class="header-anchor" href="#_4-异常处理篇" aria-hidden="true">#</a> 4. 异常处理篇</h1><blockquote><p>异步代码的异常处理通常都比较让人头疼，而协程则再一次展现了它的威力。</p></blockquote><h2 id="_1-引子" tabindex="-1"><a class="header-anchor" href="#_1-引子" aria-hidden="true">#</a> 1. 引子</h2><p>我们在前面一篇文章当中提到了这样一个例子：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">typealias</span> Callback <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit

<span class="token keyword">fun</span> <span class="token function">getUser</span><span class="token punctuation">(</span>callback<span class="token operator">:</span> Callback<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通常会定义这样的回调接口来实现异步数据的请求，我们可以很方便的将它转换成协程的接口：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">getUserCoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> suspendCoroutine<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    continuation <span class="token operator">-&gt;</span>
    getUser <span class="token punctuation">{</span>
        continuation<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并最终交给按钮点击事件或者其他事件去触发这个异步请求：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>getUserBtn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span>
    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        userNameView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token function">getUserCoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么问题来了，既然是请求，总会有失败的情形，而我们这里并没有对错误的处理，接下来我们就完善这个例子。</p><h2 id="_2-添加异常处理逻辑" tabindex="-1"><a class="header-anchor" href="#_2-添加异常处理逻辑" aria-hidden="true">#</a> 2. 添加异常处理逻辑</h2><p>首先我们加上异常回调接口函数：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> Callback<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>value<span class="token operator">:</span> T<span class="token punctuation">)</span>

    <span class="token keyword">fun</span> <span class="token function">onError</span><span class="token punctuation">(</span>t<span class="token operator">:</span> Throwable<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们在改造一下我们的 <code>getUserCoroutine</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">getUserCoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> suspendCoroutine<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span> continuation <span class="token operator">-&gt;</span>
    <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> Callback<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>value<span class="token operator">:</span> User<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            continuation<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onError</span><span class="token punctuation">(</span>t<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            continuation<span class="token punctuation">.</span><span class="token function">resumeWithException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大家可以看到，我们似乎就是完全把 <code>Callback</code> 转换成了一个 <code>Continuation</code>，在调用的时候我们只需要：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        userNameView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token function">getUserCoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        userNameView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Get User Error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">e</span></span><span class="token string">&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是的，你没看错，一个异步的请求异常，我们只需要在我们的代码中捕获就可以了，这样做的好处就是，请求的全流程异常都可以在一个 <code>try ... catch ... </code> 当中捕获，那么我们可以说真正做到了把异步代码变成了同步的写法。</p><p>如果你一直在用 RxJava 处理这样的逻辑，那么你的请求接口可能是这样的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">getUserObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Single<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Single<span class="token punctuation">.</span>create<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span> emitter <span class="token operator">-&gt;</span>
        <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> Callback<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>value<span class="token operator">:</span> User<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                emitter<span class="token punctuation">.</span><span class="token function">onSuccess</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onError</span><span class="token punctuation">(</span>t<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                emitter<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用时大概是这样的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">getUserObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">observeOn</span><span class="token punctuation">(</span>AndroidSchedulers<span class="token punctuation">.</span><span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subscribe</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> user <span class="token operator">-&gt;</span>
            userNameView<span class="token punctuation">.</span>text <span class="token operator">=</span> user<span class="token punctuation">.</span>name
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            userNameView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Get User Error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实你很容易就能发现在这里 RxJava 做的事儿跟协程的目的是一样的，只不过协程用了一种更自然的方式。</p><blockquote><p>也许你已经对 RxJava 很熟悉并且感到很自然，但相比之下，RxJava 的代码比协程的复杂度更高，更让人费解，这一点我们后面的文章中也会持续用例子来说明这一点。</p></blockquote><h2 id="_3-全局异常处理" tabindex="-1"><a class="header-anchor" href="#_3-全局异常处理" aria-hidden="true">#</a> 3. 全局异常处理</h2><p>线程也好、RxJava 也好，都有全局处理异常的方式，例如：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Thread<span class="token punctuation">.</span><span class="token function">setDefaultUncaughtExceptionHandler</span> <span class="token punctuation">{</span>t<span class="token operator">:</span> Thread<span class="token punctuation">,</span> e<span class="token operator">:</span> Throwable <span class="token operator">-&gt;</span>
        <span class="token comment">//handle exception here</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Thread &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">t<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39; throws an exception with message &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">e<span class="token punctuation">.</span>message</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">throw</span> <span class="token function">ArithmeticException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hey!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以为线程设置全局的异常捕获，当然也可以为 RxJava 来设置全局异常捕获：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>RxJavaPlugins<span class="token punctuation">.</span><span class="token function">setErrorHandler</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">//handle exception here</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Throws an exception with message &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">e<span class="token punctuation">.</span>message</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>协程显然也可以做到这一点。类似于通过 <code>Thread.setUncaughtExceptionHandler</code> 为线程设置一个异常捕获器，我们也可以为每一个协程单独设置 <code>CoroutineExceptionHandler</code>，这样协程内部未捕获的异常就可以通过它来捕获：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">val</span> exceptionHandler <span class="token operator">=</span> CoroutineExceptionHandler <span class="token punctuation">{</span> coroutineContext<span class="token punctuation">,</span> throwable <span class="token operator">-&gt;</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Throws an exception with message: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">throwable<span class="token punctuation">.</span>message</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>exceptionHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token function">ArithmeticException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hey!&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>19:06:35:087 [main] 1
19:06:35:208 [DefaultDispatcher-worker-1 @coroutine#1] Throws an exception with message: Hey!
19:06:35:211 [DefaultDispatcher-worker-1 @coroutine#1] 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CoroutineExceptionHandler</code> 竟然也是一个上下文，协程的这个上下文可真是灵魂一般的存在，这倒是一点儿也不让人感到意外。</p><p>当然，这并不算是一个全局的异常捕获，因为它只能捕获对应协程内未捕获的异常，如果你想做到真正的全局捕获，在 Jvm 上我们可以自己定义一个捕获类实现：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> GlobalCoroutineExceptionHandler<span class="token operator">:</span> CoroutineExceptionHandler <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> key<span class="token operator">:</span> CoroutineContext<span class="token punctuation">.</span>Key<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span> <span class="token operator">=</span> CoroutineExceptionHandler

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">handleException</span><span class="token punctuation">(</span>context<span class="token operator">:</span> CoroutineContext<span class="token punctuation">,</span> exception<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Coroutine exception: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">exception</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 classpath 中创建 META-INF/services/kotlinx.coroutines.CoroutineExceptionHandler，文件名实际上就是 <code>CoroutineExceptionHandler</code> 的全类名，文件内容就写我们的实现类的全类名：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>com.bennyhuo.coroutines.sample2.exceptions.GlobalCoroutineExceptionHandler
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样协程中没有被捕获的异常就会最终交给它处理。</p><blockquote><p>Jvm 上全局 <code>CoroutineExceptionHandler</code> 的配置，本质上是对 <code>ServiceLoader</code> 的应用，之前我们在讲 <code>Dispatchers.Main</code> 的时候提到过，Jvm 上它的实现也是通过 <code>ServiceLoader</code> 来加载的。</p></blockquote><p>需要明确的一点是，通过 <code>async</code> 启动的协程出现未捕获的异常时会忽略 <code>CoroutineExceptionHandler</code>，这与 <code>launch</code> 的设计思路是不同的。</p><h2 id="_4-异常传播" tabindex="-1"><a class="header-anchor" href="#_4-异常传播" aria-hidden="true">#</a> 4. 异常传播</h2><p>异常传播还涉及到协程作用域的概念，例如我们启动协程的时候一直都是用的 <code>GlobalScope</code>，意味着这是一个独立的顶级协程作用域，此外还有 <code>coroutineScope { ... }</code> 以及 <code>supervisorScope { ... }</code>。</p><ul><li>通过 GlobeScope 启动的协程单独启动一个协程作用域，内部的子协程遵从默认的作用域规则。通过 GlobeScope 启动的协程“自成一派”。</li><li>coroutineScope 是继承外部 Job 的上下文创建作用域，在其内部的取消操作是双向传播的，子协程未捕获的异常也会向上传递给父协程。它更适合一系列对等的协程并发的完成一项工作，任何一个子协程异常退出，那么整体都将退出，简单来说就是”一损俱损“。这也是协程内部再启动子协程的默认作用域。</li><li>supervisorScope 同样继承外部作用域的上下文，但其内部的取消操作是单向传播的，父协程向子协程传播，反过来则不然，这意味着子协程出了异常并不会影响父协程以及其他兄弟协程。它更适合一些独立不相干的任务，任何一个任务出问题，并不会影响其他任务的工作，简单来说就是”自作自受“，例如 UI，我点击一个按钮出了异常，其实并不会影响手机状态栏的刷新。需要注意的是，supervisorScope 内部启动的子协程内部再启动子协程，如无明确指出，则遵守默认作用域规则，也即 supervisorScope 只作用域其直接子协程。</li></ul><p>这么说还是比较抽象，因此我们拿一些例子来分析一下：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        coroutineScope <span class="token punctuation">{</span> <span class="token comment">//①</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
            launch <span class="token punctuation">{</span> <span class="token comment">// ②</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
                launch <span class="token punctuation">{</span> <span class="token comment">// ③ </span>
                    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
                    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
                    <span class="token keyword">throw</span> <span class="token function">ArithmeticException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hey!!&quot;</span></span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
            <span class="token keyword">val</span> job <span class="token operator">=</span> launch <span class="token punctuation">{</span> <span class="token comment">// ④</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
                 job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;9&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;10. </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">e</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;12. </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">e</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这例子稍微有点儿复杂，但也不难理解，我们在一个 <code>coroutineScope</code> 当中启动了两个协程 ②④，在 ② 当中启动了一个子协程 ③，作用域直接创建的协程记为①。那么 ③ 当中抛异常会发生什么呢？我们先来看下输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>11:37:36:208 [main] 1
11:37:36:255 [main] 2
11:37:36:325 [DefaultDispatcher-worker-1] 3
11:37:36:325 [DefaultDispatcher-worker-1] 5
11:37:36:326 [DefaultDispatcher-worker-3] 4
11:37:36:331 [main] 6
11:37:36:336 [DefaultDispatcher-worker-1] 7
11:37:36:336 [main] 8
11:37:36:441 [DefaultDispatcher-worker-1] 10. kotlinx.coroutines.JobCancellationException: ScopeCoroutine is cancelling; job=ScopeCoroutine{Cancelling}@2bc92d2f
11:37:36:445 [DefaultDispatcher-worker-1] 12. java.lang.ArithmeticException: Hey!!
11:37:36:445 [DefaultDispatcher-worker-1] 13
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意两个位置，一个是 10，我们调用 <code>join</code>，收到了一个取消异常，在协程当中支持取消的操作的suspend方法在取消时会抛出一个 <code>CancellationException</code>，这类似于线程中对 <code>InterruptException</code> 的响应，遇到这种情况表示 <code>join</code> 调用所在的协程已经被取消了，那么这个取消究竟是怎么回事呢？</p><p>原来协程 ③ 抛出了未捕获的异常，进入了异常完成的状态，它与父协程 ② 之间遵循默认的作用域规则，因此 ③ 会通知它的父协程也就是 ② 取消，② 根据作用域规则通知父协程 ① 也就是整个作用域取消，这是一个自下而上的一次传播，这样身处 ① 当中的 <code>job.join</code> 调用就会抛异常，也就是 10 处的结果了。如果不是很理解这个操作，想一下我们说到的，<code>coroutineScope</code> 内部启动的协程就是“一损俱损”。实际上由于父协程 ① 被取消，协程④ 也不能幸免，如果大家有兴趣的话，也可以对 ④ 当中的 <code>delay</code>进行捕获，一样会收获一枚取消异常。</p><p>还有一个位置就是 12，这个是我们对 <code>coroutineScope</code> 整体的一个捕获，如果 <code>coroutineScope</code> 内部以为异常而结束，那么我们是可以对它直接 <code>try ... catch ...</code> 来捕获这个异常的，这再一次表明协程把异步的异常处理到同步代码逻辑当中。</p><p>那么如果我们把 <code>coroutineScope</code> 换成 <code>supervisorScope</code>，其他不变，运行结果会是怎样呢？</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>11:52:48:632 [main] 1
11:52:48:694 [main] 2
11:52:48:875 [main] 6
11:52:48:892 [DefaultDispatcher-worker-1 @coroutine#1] 3
11:52:48:895 [DefaultDispatcher-worker-1 @coroutine#1] 5
11:52:48:900 [DefaultDispatcher-worker-3 @coroutine#3] 4
11:52:48:905 [DefaultDispatcher-worker-2 @coroutine#2] 7
11:52:48:907 [main] 8
Exception in thread &quot;DefaultDispatcher-worker-3 @coroutine#3&quot; java.lang.ArithmeticException: Hey!!
	at com.bennyhuo.coroutines.sample2.exceptions.ScopesKt$main$2$1$1.invokeSuspend(Scopes.kt:17)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(Dispatched.kt:238)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:594)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.access$runSafely(CoroutineScheduler.kt:60)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:742)
11:52:49:915 [DefaultDispatcher-worker-3 @coroutine#2] 9
11:52:49:915 [DefaultDispatcher-worker-3 @coroutine#2] 11
11:52:49:915 [DefaultDispatcher-worker-3 @coroutine#2] 13
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，1-8 的输出其实没有本质区别，顺序上的差异是线程调度的前后造成的，并不会影响协程的语义。差别主要在于 9 与 10、11与12的区别，如果把 scope 换成 <code>supervisorScope</code>，我们发现 ③ 的异常并没有影响作用域以及作用域内的其他子协程的执行，也就是我们所说的“自作自受”。</p><p>这个例子其实我们再稍做一些改动，为 ② 和 ③ 增加一个 <code>CoroutineExceptionHandler</code>，就可以证明我们前面提到的另外一个结论：</p><p>首先我们定义一个 <code>CoroutineExceptionHandler</code>，我们通过上下文获取一下异常对应的协程的名字：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> exceptionHandler <span class="token operator">=</span> CoroutineExceptionHandler <span class="token punctuation">{</span> coroutineContext<span class="token punctuation">,</span> throwable <span class="token operator">-&gt;</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">coroutineContext<span class="token punctuation">[</span>CoroutineName<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">throwable</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，基于前面的例子我们为 ② 和 ③ 添加 <code>CoroutineExceptionHandler</code> 和名字：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token operator">..</span><span class="token punctuation">.</span>
supervisorScope <span class="token punctuation">{</span> <span class="token comment">//①</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token function">launch</span><span class="token punctuation">(</span>exceptionHandler <span class="token operator">+</span> <span class="token function">CoroutineName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;②&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// ②</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token function">launch</span><span class="token punctuation">(</span>exceptionHandler <span class="token operator">+</span> <span class="token function">CoroutineName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;③&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// ③</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">..</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再运行这段程序，结果就比较有意思了：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>...
07:30:11:519 [DefaultDispatcher-worker-1] CoroutineName(②) java.lang.ArithmeticException: Hey!!
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现触发的 <code>CoroutineExceptionHandler</code> 竟然是协程 ② 的，意外吗？不意外，因为我们前面已经提到，对于 <code>supervisorScope</code> 的子协程 （例如 ②）的子协程（例如 ③），如果没有明确指出，它是遵循默认的作用于规则的，也就是 <code>coroutineScope</code> 的规则了，出现未捕获的异常会尝试传递给父协程并尝试取消父协程。</p><p>究竟使用什么 Scope，大家自己根据实际情况来确定，我给出一些建议：</p><ul><li>对于没有协程作用域，但需要启动协程的时候，适合用 GlobalScope</li><li>对于已经有协程作用域的情况（例如通过 GlobalScope 启动的协程体内），直接用协程启动器启动</li><li>对于明确要求子协程之间相互独立不干扰时，使用 supervisorScope</li><li>对于通过标准库 API 创建的协程，这样的协程比较底层，没有 Job、作用域等概念的支撑，例如我们前面提到过 suspend main 就是这种情况，对于这种情况优先考虑通过 coroutineScope 创建作用域；更进一步，大家尽量不要直接使用标准库 API，除非你对 Kotlin 的协程机制非常熟悉。</li></ul><p>当然，对于可能出异常的情况，请大家尽量做好异常处理，不要将问题复杂化。</p><h3 id="_5-join-和-await" tabindex="-1"><a class="header-anchor" href="#_5-join-和-await" aria-hidden="true">#</a> 5. join 和 await</h3><p>前面我们举例子一直用的是 <code>launch</code>，启动协程其实常用的还有 <code>async</code>、<code>actor</code> 和 <code>produce</code>，其中 <code>actor</code> 和 <code>launch</code> 的行为类似，在未捕获的异常出现以后，会被当做为处理的异常抛出，就像前面的例子那样。而 <code>async</code> 和 <code>produce</code> 则主要是用来输出结果的，他们内部的异常只在外部消费他们的结果时抛出。这两组协程的启动器，你也可以认为分别是“消费者”和“生产者”，消费者异常立即抛出，生产者只有结果消费时抛出异常。</p><blockquote><p><code>actor</code> 和 <code>produce</code> 这两个 API 目前处于比较微妙的境地，可能会被废弃或者后续提供替代方案，不建议大家使用，我们在这里就不展开细讲了。</p></blockquote><p>那么消费结果指的是什么呢？对于 <code>async</code> 来讲，就是 <code>await</code>，例如：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> deferred <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span>async<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token punctuation">{</span> 
        <span class="token keyword">throw</span> <span class="token function">ArithmeticException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> value <span class="token operator">=</span> deferred<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;1. </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;2. </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">e</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个从逻辑上很好理解，我们调用 <code>await</code> 时，期望 <code>deferred</code> 能够给我们提供一个合适的结果，但它因为出异常，没有办法做到这一点，因此只好给我们丢出一个异常了。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>13:25:14:693 [main] 2. java.lang.ArithmeticException
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们自己实现的 <code>getUserCoroutine</code> 也属于类似的情况，在获取结果时，如果请求出了异常，我们就只能拿到一个异常，而不是正常的结果。相比之下，<code>join</code> 就有趣的多了，它只关注是否执行完，至于是因为什么完成，它不关心，因此如果我们在这里替换成 <code>join</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> deferred <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span>async<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token function">ArithmeticException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        deferred<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;2. </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">e</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们就会发现，异常被吞掉了！</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>13:26:15:034 [main] 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果例子当中我们用 <code>launch</code> 替换 <code>async</code>，<code>join</code> 处仍然不会有任何异常抛出，还是那句话，它只关心有没有完成，至于怎么完成的它不关心。不同之处在于， <code>launch</code> 中未捕获的异常与 <code>async</code> 的处理方式不同，<code>launch</code> 会直接抛出给父协程，如果没有父协程（顶级作用域中）或者处于 <code>supervisorScope</code> 中父协程不响应，那么就交给上下文中指定的 <code>CoroutineExceptionHandler</code>处理，如果没有指定，那传给全局的 <code>CoroutineExceptionHandler</code> 等等，而 <code>async</code> 则要等 <code>await</code> 来消费。</p><blockquote><p>不管是哪个启动器，在应用了作用域之后，都会按照作用域的语义进行异常扩散，进而触发相应的取消操作，对于 <code>async</code> 来说就算不调用 <code>await</code> 来获取这个异常，它也会在 <code>coroutineScope</code> 当中触发父协程的取消逻辑，这一点请大家注意。</p></blockquote><h3 id="_6-小结" tabindex="-1"><a class="header-anchor" href="#_6-小结" aria-hidden="true">#</a> 6. 小结</h3><p>这一篇我们讲了协程的异常处理。这一块儿稍微显得有点儿复杂，但仔细理一下主要有三条线：</p><ol><li><strong>协程内部异常处理流程</strong>：launch 会在内部出现未捕获的异常时尝试触发对父协程的取消，能否取消要看作用域的定义，如果取消成功，那么异常传递给父协程，否则传递给启动时上下文中配置的 CoroutineExceptionHandler 中，如果没有配置，会查找全局（JVM上）的 CoroutineExceptionHandler 进行处理，如果仍然没有，那么就将异常交给当前线程的 UncaughtExceptionHandler 处理；而 async 则在未捕获的异常出现时同样会尝试取消父协程，但不管是否能够取消成功都不会后其他后续的异常处理，直到用户主动调用 await 时将异常抛出。</li><li><strong>异常在作用域内的传播</strong>：当协程出现异常时，会根据当前作用域触发异常传递，GlobalScope 会创建一个独立的作用域，所谓“自成一派”，而 在 coroutineScope 当中协程异常会触发父协程的取消，进而将整个协程作用域取消掉，如果对 coroutineScope 整体进行捕获，也可以捕获到该异常，所谓“一损俱损”；如果是 supervisorScope，那么子协程的异常不会向上传递，所谓“自作自受”。</li><li><strong>join 和 await 的不同</strong>：join 只关心协程是否执行完，await 则关心运行的结果，因此 join 在协程出现异常时也不会抛出该异常，而 await 则会；考虑到作用域的问题，如果协程抛异常，可能会导致父协程的取消，因此调用 join 时尽管不会对协程本身的异常进行抛出，但如果 join 调用所在的协程被取消，那么它会抛出取消异常，这一点需要留意。</li></ol><p>如果大家能把这三点理解清楚了，那么协程的异常处理可以说就非常清晰了。文中因为异常传播的原因，我们提到了取消，但没有展开详细讨论，后面我们将会专门针对取消输出一篇文章，帮助大家加深理解。</p><h3 id="附加说明" tabindex="-1"><a class="header-anchor" href="#附加说明" aria-hidden="true">#</a> 附加说明</h3>`,83),r={href:"https://github.com/Kotlin/kotlinx.coroutines/issues/1123",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"当然，这个 bug 对于生成环境的影响很小，大家也不要担心。",-1),k=n("h2",{id:"关于作者",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#关于作者","aria-hidden":"true"},"#"),s(" 关于作者")],-1),v=n("p",null,[n("strong",null,"霍丙乾 bennyhuo"),s("，Google 开发者专家（Kotlin 方向）；"),n("strong",null,"《深入理解 Kotlin 协程》"),s(" 作者（机械工业出版社，2020.6）；"),n("strong",null,"《深入实践 Kotlin 元编程》"),s(" 作者（机械工业出版社，2023.8）；移动客户端工程师，先后就职于腾讯地图、猿辅导、腾讯视频。")],-1),m=n("li",null,"GitHub：https://github.com/bennyhuo",-1),b=n("li",null,"博客：https://www.bennyhuo.com",-1),g={href:"https://space.bilibili.com/28615855",target:"_blank",rel:"noopener noreferrer"},h=n("strong",null,"霍丙乾 bennyhuo",-1),x=n("li",null,[s("微信公众号："),n("strong",null,"霍丙乾 bennyhuo")],-1);function f(w,y){const a=i("ExternalLinkIcon");return o(),p("div",null,[u,n("p",null,[s("join 在父协程被取消时有一个 bug 会导致不抛出取消异常，我在准备本文时发现该问题，目前已经提交到官方并得到了修复，预计合入到 1.2.1 发版，大家有兴趣可以查看这个 issue："),n("a",r,[s("No CancellationException thrown when join on a crashed Job"),e(a)]),s("。")]),d,k,v,n("ul",null,[m,b,n("li",null,[s("bilibili："),n("a",g,[h,e(a)])]),x])])}const S=t(l,[["render",f],["__file","04-exceptions.html.vue"]]);export{S as default};
