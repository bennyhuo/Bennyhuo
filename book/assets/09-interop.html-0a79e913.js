import{_ as e,X as t,Y as o,Z as n,a0 as s,$ as p,a1 as i,D as c}from"./framework-98842e7a.js";const l={},u=i(`<h1 id="_9-异步函数与其他语言的互调用" tabindex="-1"><a class="header-anchor" href="#_9-异步函数与其他语言的互调用" aria-hidden="true">#</a> 9. 异步函数与其他语言的互调用</h1><blockquote><p>现在很多 iOS APP 还是用 Objective-C 写的，异步函数在 Objective-C 当中怎么调用也是个问题。</p></blockquote><h2 id="从异步回调到异步函数" tabindex="-1"><a class="header-anchor" href="#从异步回调到异步函数" aria-hidden="true">#</a> 从异步回调到异步函数</h2><p>截止目前，我们已经详细探讨了 Swift 协程当中的绝大多数语法设计，这其中最基本也是最重要的就是异步函数。</p><p>在异步函数出现之前，我们通常会为函数添加回调来实现异步结果返回，以 Swift 的网络请求库 Alamofire 为例，它的 DataRequest 有这样一个函数：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">public</span> <span class="token keyword">func</span> <span class="token function-definition function">responseData</span><span class="token punctuation">(</span>
  queue<span class="token punctuation">:</span> <span class="token class-name">DispatchQueue</span> <span class="token operator">=</span> <span class="token punctuation">.</span>main<span class="token punctuation">,</span>
  dataPreprocessor<span class="token punctuation">:</span> <span class="token class-name">DataPreprocessor</span> <span class="token operator">=</span> <span class="token class-name">DataResponseSerializer</span><span class="token punctuation">.</span>defaultDataPreprocessor<span class="token punctuation">,</span>
  emptyResponseCodes<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">DataResponseSerializer</span><span class="token punctuation">.</span>defaultEmptyResponseCodes<span class="token punctuation">,</span>
  emptyRequestMethods<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">HTTPMethod</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">DataResponseSerializer</span><span class="token punctuation">.</span>defaultEmptyRequestMethods<span class="token punctuation">,</span>
  completionHandler<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token class-name">AFDataResponse</span><span class="token operator">&lt;</span><span class="token class-name">Data</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span>
<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数有很多参数，不过我们只需要关心最后一个：completionHandler，它是一个闭包，接收一个参数为 <code>AFDataResponse&lt;Data&gt;</code> 的类型作为请求结果。</p><p>从 Swift 5.5 开始，我们可以将其包装成异步函数，添加对结果的异步返回、异常的传播以及对取消响应的支持：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">responseDataAsync</span><span class="token punctuation">(</span>
  queue<span class="token punctuation">:</span> <span class="token class-name">DispatchQueue</span> <span class="token operator">=</span> <span class="token punctuation">.</span>main<span class="token punctuation">,</span>
  dataPreprocessor<span class="token punctuation">:</span> <span class="token class-name">DataPreprocessor</span> <span class="token operator">=</span> <span class="token class-name">DataResponseSerializer</span><span class="token punctuation">.</span>defaultDataPreprocessor<span class="token punctuation">,</span>
  emptyResponseCodes<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">DataResponseSerializer</span><span class="token punctuation">.</span>defaultEmptyResponseCodes<span class="token punctuation">,</span>
  emptyRequestMethods<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">HTTPMethod</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">DataResponseSerializer</span><span class="token punctuation">.</span>defaultEmptyRequestMethods
<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token keyword">await</span> withTaskCancellationHandler <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token keyword">await</span> withCheckedThrowingContinuation <span class="token punctuation">{</span> continuation <span class="token keyword">in</span>
            <span class="token function">responseData</span><span class="token punctuation">(</span>
                queue<span class="token punctuation">:</span> queue<span class="token punctuation">,</span>
                dataPreprocessor<span class="token punctuation">:</span> dataPreprocessor<span class="token punctuation">,</span>
                emptyResponseCodes<span class="token punctuation">:</span> emptyResponseCodes<span class="token punctuation">,</span> emptyRequestMethods<span class="token punctuation">:</span> emptyRequestMethods
            <span class="token punctuation">)</span> <span class="token punctuation">{</span> response <span class="token keyword">in</span>
                <span class="token keyword">switch</span> response<span class="token punctuation">.</span>result <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token keyword">let</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span> continuation<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>returning<span class="token punctuation">:</span> data<span class="token punctuation">)</span>
                <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token keyword">let</span> error<span class="token punctuation">)</span><span class="token punctuation">:</span> continuation<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>throwing<span class="token punctuation">:</span> error<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> onCancel<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从异步回调到异步函数总是要经过这样一个包装的过程，这个过程实际上并不轻松。因此我们也更希望第三方开发者在提供异步回调的时候同时提供异步函数的版本来方便我们按需使用。</p><h2 id="objective-c-的异步回调" tabindex="-1"><a class="header-anchor" href="#objective-c-的异步回调" aria-hidden="true">#</a> Objective-C 的异步回调</h2><h3 id="objective-c-回调函数的自动转换" tabindex="-1"><a class="header-anchor" href="#objective-c-回调函数的自动转换" aria-hidden="true">#</a> Objective-C 回调函数的自动转换</h3><p>在以前的 iOS SDK 当中，接收形如 completionHandler 这样的回调的 Objective-C 函数有 1000 多个。例如：</p><div class="language-objective-c line-numbers-mode" data-ext="objective-c"><pre class="language-objective-c"><code>- (void)signData:(NSData *)signData 
withSecureElementPass:(PKSecureElementPass *)secureElementPass 
      completion:(void (^)(NSData *signedData, NSData *signature, NSError *error))completion;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数相当于 Swift 的如下函数声明：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">sign</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> signData<span class="token punctuation">:</span> <span class="token class-name">Data</span><span class="token punctuation">,</span> 
    using secureElementPass<span class="token punctuation">:</span> <span class="token class-name">PKSecureElementPass</span><span class="token punctuation">,</span> 
completion<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token class-name">Data</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">Data</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们对这些函数一个一个完成包装，那必然会耗费大量的时间和精力。因此，Swift 对接收类似的回调并符合一定条件的 Objective-C 函数自动做了一些转换，以上述 signData 函数为例，可以被自动转换为：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">sign</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> signData<span class="token punctuation">:</span> <span class="token class-name">Data</span><span class="token punctuation">,</span> using secureElementPass<span class="token punctuation">:</span> <span class="token class-name">PKSecureElementPass</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token class-name">Data</span><span class="token punctuation">,</span> <span class="token class-name">Data</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们来简单分析一下这个转换过程。</p><ol><li>参数 completion 被移除了。 completion 的类型是 Objective-C 的 block，可以用来处理异步结果的返回。</li><li>转换后的异步函数的返回值 (Data, Data)，它实际上对应于 completion 除 <code>NSError *</code> 之外的两个参数。需要注意的是，回调当中的 signedData 和 signature 的类型均为 <code>NSData *</code>，它们实际上是可以为 nil 的，单纯考虑类型的映射，它们应该映射成 Swift 的 <code>Data?</code> 类型，而在转换之后的异步函数当中则为 <code>Data</code> 类型，这是因为逻辑上如果这俩个 <code>Data</code> 返回 nil，则应该通过参数 <code>NSError *</code> 来使得异步函数抛出异常。这个细节一定要注意。</li><li>completion 的参数 <code>NSError *</code> 表示结果有可能会出现异常，因此转换后的异步函数是会抛出异常的，声明为 throws。</li></ol><p>那这个转换需要符合什么条件呢？</p><ul><li>函数本身和参数回调的返回值均为 void</li><li>回调只能被调用一次</li><li>函数被显式地用 swift_async 修饰或者隐式地通过参数名来推导，其中支持推导的情况包括： <ul><li>函数只有一个参数且它的标签为 WithCompletion、WithCompletionHandler、WithCompletionBlock、WithReplyTo、WithReply。</li><li>函数有多个参数，且最后一个是回调，并且它的标签为 completion，withCompletion，completionHandler，withCompletionHandler，completionBlock，withCompletionBlock，replyTo，withReplyTo，reply 或者 replyTo。</li><li>函数有多个参数，且最后一个参数的标签以一个参数的情况当中列出的标签结尾，最后一个参数是回调。</li></ul></li></ul><p>我们再给一个例子，请大家注意它的函数名：</p><div class="language-objective-c line-numbers-mode" data-ext="objective-c"><pre class="language-objective-c"><code>-(void)getUserAsync:(NSString *)name completion:(void (^)(User *, NSError *))completion;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>转换后：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">userAsync</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">User</span><span class="token operator">?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于以 get 开头的 Objective-C 函数，转换之后函数名当中的 get 被去除了。除此之外其他规则与前面提到的一致。</p><p>有了这个转换，很多旧 SDK 当中的 Objective-C 回调函数都可以当成 Swift 的异步函数来调用，可以极大的简化我们的开发流程。</p><h3 id="在-objective-c-当中调用-swift-的异步函数" tabindex="-1"><a class="header-anchor" href="#在-objective-c-当中调用-swift-的异步函数" aria-hidden="true">#</a> 在 Objective-C 当中调用 Swift 的异步函数</h3><p>相反地，如果我们定义了 Swift 的异步函数，并且希望在 Objective-C 当中调用，则可以声明成 @objc 异步函数，例如：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token attribute atrule">@objc</span> <span class="token keyword">class</span> <span class="token class-name">GitHubApiAsync</span><span class="token punctuation">:</span> <span class="token class-name">NSObject</span> <span class="token punctuation">{</span>
    <span class="token attribute atrule">@objc</span> <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">listFollowers</span><span class="token punctuation">(</span><span class="token keyword">for</span> userName<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token class-name">User</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token constant">AF</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token constant">GITHUB_API_ENDPOINT</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">/users/</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">userName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">/followers&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">responseDecodableAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GitHubApiAsync 类当中的 listFollowers 函数相当于：</p><div class="language-objective-c line-numbers-mode" data-ext="objective-c"><pre class="language-objective-c"><code>@interface GitHubApiAsync : NSObject
+ (void)listFollowersFor:(NSString * _Nonnull)userName completionHandler:(void (^ _Nonnull)(NSArray&lt;User *&gt; * _Nullable, NSError * _Nullable))completionHandler;
@end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="调用-kotlin-的挂起函数-suspend-function" tabindex="-1"><a class="header-anchor" href="#调用-kotlin-的挂起函数-suspend-function" aria-hidden="true">#</a> 调用 Kotlin 的挂起函数（suspend function）</h2><p>了解了 Swift 的异步函数如何与 Objective-C 互调用的细节之后，再来看一下 Kotlin 的挂起函数是如何支持被 Swift 调用的。当然这个特性还在实验当中，后续也可能会发生变化。</p><h3 id="支持-objective-c-回调" tabindex="-1"><a class="header-anchor" href="#支持-objective-c-回调" aria-hidden="true">#</a> 支持 Objective-C 回调</h3><p>Kotlin 1.4 开始引入了挂起函数对 Swift 的支持，支持的方式就是讲挂起函数转成回调，例如：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// kotlin</span>
<span class="token keyword">class</span> Greeting <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression"><span class="token function">Platform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>platform</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!&quot;</span></span>
    <span class="token punctuation">}</span>

    <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">greetingAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression"><span class="token function">Platform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>platform</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译之后会生成 Objective-C 头文件，如下：</p><div class="language-objective-c line-numbers-mode" data-ext="objective-c"><pre class="language-objective-c"><code>__attribute__((objc_subclassing_restricted))
__attribute__((swift_name(&quot;Greeting&quot;)))
@interface SharedGreeting : SharedBase
...
- (NSString *)greeting __attribute__((swift_name(&quot;greeting()&quot;)));
- (void)greetingAsyncWithCompletionHandler:(void (^)(NSString * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name(&quot;greetingAsync(completionHandler:)&quot;)));
@end;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的类名为 <code>SharedGreeting</code>，其中 Shared 是模块名。<code>__attribute__((swift_name(&quot;Greeting&quot;)))</code> 使得这个 Objective-C 类映射到 Swift 当中的名字是 <code>Greeting</code>。</p><p>我们重点关注一下 greetingAsync 函数，它映射成了下面的回调形式：</p><div class="language-objective-c line-numbers-mode" data-ext="objective-c"><pre class="language-objective-c"><code>- (void)greetingAsyncWithCompletionHandler:(void (^)(NSString * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name(&quot;greetingAsync(completionHandler:)&quot;)));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="支持-swift-异步函数" tabindex="-1"><a class="header-anchor" href="#支持-swift-异步函数" aria-hidden="true">#</a> 支持 Swift 异步函数</h3><p>Kotlin 挂起函数对于 Objective-C 回调的支持，正好命中了前面讨论的回调自动转换成 Swift 异步函数的条件，因此理论上在 Swift 5.5 当中，我们也可以直接把 Kotlin 的挂起函数当成 Swift 的异步函数去调用：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">// swift</span>
<span class="token keyword">func</span> <span class="token function-definition function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">Greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">greetingAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然这里还有一些细节的问题。Kotlin 1.5.30 当中也对此做了一点点跟进，在生成的 Objective-C 头文件当中添加了对 <code>_Nullable_result</code> 的支持，这使得 Kotlin 的挂起函数在返回可空类型时，能够正确被转化成返回 optional 类型的 Swift 异步函数，例如：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>suspend fun <span class="token function">greetingAsyncNullable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Hello, \${Platform().platform}&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到这个例子的返回值类型声明为 <code>String?</code>，生成的 Objective-C 函数如下：</p><div class="language-oc line-numbers-mode" data-ext="oc"><pre class="language-oc"><code>- (void)greetingAsyncNullableWithCompletionHandler:(void (^)(NSString * _Nullable_result, NSError * _Nullable))completionHandler __attribute__((swift_name(&quot;greetingAsyncNullable(completionHandler:)&quot;)));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>仔细对比与 greetingAsync 的差异不难发现，返回值的类型在 greetingAsyncNullable 当中被映射成了 <code>NSString * _Nullable_result</code>，而在 greetingAsync 当中则映射成了 <code>NSString * _Nullable</code>。这就不得不提一下 <code>_Nullable_result</code> 与 <code>_Nullable</code> 的差异了，前者可以令转化之后的 Swift 异步函数返回 optional 类型（对应于 Kotlin 的可空类型，nullable type），而后者则返回非 optional 类型（对应于 Kotlin 的不可空类型，nonnull type）。</p><h3 id="kotlin-挂起函数的异常传播" tabindex="-1"><a class="header-anchor" href="#kotlin-挂起函数的异常传播" aria-hidden="true">#</a> Kotlin 挂起函数的异常传播</h3><p>如果 Kotlin 的挂起函数没有声明为 <code>@Throws</code>，则只有 <code>CancellationException</code> 会被转换为 <code>NSError</code> 抛到 Swift 当中，其他的都会作为严重错误使程序退出，因此如果需要暴露给 Swift 调用，我们通常建议对于可能有异常抛出的 Kotlin 函数添加 <code>@Throws</code> 注解，例如：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// kotlin</span>
<span class="token annotation builtin">@Throws</span><span class="token punctuation">(</span>Throwable<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">greetingAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;error from Kotlin&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression"><span class="token function">Platform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>platform</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样在 Swift 调用时也可以直接捕获到这个异常：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token comment">//swift</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">Greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">greetingAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序输出如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Error Domain=KotlinException Code=0 &quot;error from Kotlin&quot; UserInfo={NSLocalizedDescription=error from Kotlin, KotlinException=kotlin.IllegalArgumentException: error from Kotlin, KotlinExceptionOrigin=}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="上下文零传递" tabindex="-1"><a class="header-anchor" href="#上下文零传递" aria-hidden="true">#</a> 上下文零传递</h3><p>尽管目前 Kotlin 的挂起函数可以被当做 Swift 的异步函数去调用，但 Kotlin 侧仍没有专门仔细地针对 Swift 异步函数调用的场景进行专门的设计和定制。因此像 Swift 侧的取消状态（在 Kotlin 挂起函数中获取 Swift 的 Task 的取消状态）、调度器（Swift 的 actor 以及与 Task 绑定的调度器）、TaskLocal 变量以及 Kotlin 侧挂起函数执行时的调度器、协程上下文等状态都是没有实现传递的。</p><p>基于这一点，大家在使用过程中应当尽可能将函数的设计进行简化，避免场景过于复杂而引发令人难以理解的问题。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本文我们探讨了 Swift 协程当中的异步函数（async function）与 Objective-C 的互调用问题，其中介绍了 Objective-C 回调自动映射成 Swift 异步函数的条件和细节，以及 Kotlin 挂起函数对 Swift 异步函数的支持。</p><h2 id="关于作者" tabindex="-1"><a class="header-anchor" href="#关于作者" aria-hidden="true">#</a> 关于作者</h2><p><strong>霍丙乾 bennyhuo</strong>，Google 开发者专家（Kotlin 方向）；<strong>《深入理解 Kotlin 协程》</strong> 作者（机械工业出版社，2020.6）；<strong>《深入实践 Kotlin 元编程》</strong> 作者（机械工业出版社，2023.8）；移动客户端工程师，先后就职于腾讯地图、猿辅导、腾讯视频。</p>`,65),r=n("li",null,"GitHub：https://github.com/bennyhuo",-1),d=n("li",null,"博客：https://www.bennyhuo.com",-1),k={href:"https://space.bilibili.com/28615855",target:"_blank",rel:"noopener noreferrer"},v=n("strong",null,"霍丙乾 bennyhuo",-1),m=n("li",null,[s("微信公众号："),n("strong",null,"霍丙乾 bennyhuo")],-1);function b(g,f){const a=c("ExternalLinkIcon");return t(),o("div",null,[u,n("ul",null,[r,d,n("li",null,[s("bilibili："),n("a",k,[v,p(a)])]),m])])}const h=e(l,[["render",b],["__file","09-interop.html.vue"]]);export{h as default};
