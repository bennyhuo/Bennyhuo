import{_ as e,X as i,Y as l,Z as t,a0 as o,$ as r,a1 as a,D as s}from"./framework-98842e7a.js";const c={},h=a('<h1 id="_0-前言" tabindex="-1"><a class="header-anchor" href="#_0-前言" aria-hidden="true">#</a> 0. 前言</h1><p>经过几年的打磨，Swift 已经成为一门成熟度非常高的语言。</p><p>作为 Kotlin 布道师，Android 从业者，我本人对 Swift 的发展也保持了持续的关注。Swift 与 Kotlin 在外形上有着极高的相似度，学习 Swift 的一些特性有时候也可以帮助我更好的理解 Kotlin 的语法。</p><p>在协程这个特性上，Kotlin 还是走得比较靠前，我当时在写《深入理解 Kotlin 协程》这本书的时候也查阅过 Swift 的一些第三方协程实现，不过当时因为官方一直都没有消息，因此在书中没有提及。</p><p>这下好了，Swift 终于在 5.5 当中正式支持了协程，作为现代语言必备的特性，Swift 总算是补齐了自己的短板。</p><p>我计划写几篇文章来介绍一下 Swift 协程的特性，内容会以 Swift 协程的基本概念、语法设计、使用场景等方面为基础展开，也会与大前端开发者常见的 Kotlin、JavaScript 做对比，希望能给大家一个更多元化的视角来理解这个语法特性。</p><blockquote><p><strong>说明</strong>：最初在 Xcode 13.0 刚发布的时候，Swift 协程需要 iOS 15.0、macOS 12.0 以上；随后在 Xcode 13.2 发布以后，最低版本要求降低到 iOS 13.0、 macOS Catalina（10.15），这样看来线上项目也终于有机会尝试这个新特性了。</p></blockquote><h2 id="关于作者" tabindex="-1"><a class="header-anchor" href="#关于作者" aria-hidden="true">#</a> 关于作者</h2><p><strong>霍丙乾 bennyhuo</strong>，Google 开发者专家（Kotlin 方向）；<strong>《深入理解 Kotlin 协程》</strong> 作者（机械工业出版社，2020.6）；<strong>《深入实践 Kotlin 元编程》</strong> 作者（机械工业出版社，2023.8）；移动客户端工程师，先后就职于腾讯地图、猿辅导、腾讯视频。</p>',9),d=t("li",null,"GitHub：https://github.com/bennyhuo",-1),_=t("li",null,"博客：https://www.bennyhuo.com",-1),p={href:"https://space.bilibili.com/28615855",target:"_blank",rel:"noopener noreferrer"},u=t("strong",null,"霍丙乾 bennyhuo",-1),f=t("li",null,[o("微信公众号："),t("strong",null,"霍丙乾 bennyhuo")],-1);function b(S,w){const n=s("ExternalLinkIcon");return i(),l("div",null,[h,t("ul",null,[d,_,t("li",null,[o("bilibili："),t("a",p,[u,r(n)])]),f])])}const m=e(c,[["render",b],["__file","00-foreword.html.vue"]]);export{m as default};
