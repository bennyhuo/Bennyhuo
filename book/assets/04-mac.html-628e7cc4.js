import{_ as s,X as o,Y as i,Z as a,a0 as e,$ as d,a1 as t,D as c}from"./framework-98842e7a.js";const l={},r=t(`<h1 id="_4-这波更新-居然利好-mac-用户" tabindex="-1"><a class="header-anchor" href="#_4-这波更新-居然利好-mac-用户" aria-hidden="true">#</a> 4. 这波更新，居然利好 mac 用户</h1><blockquote><p>mac 这几年的变化还是挺大的，Java 也必须做一些适应性的变化，不然都没法外接高分显示器了。</p></blockquote><p>关于 mac 的更新一共两条，我们来一一介绍给大家。</p><h2 id="jep-382-new-macos-rendering-pipeline" tabindex="-1"><a class="header-anchor" href="#jep-382-new-macos-rendering-pipeline" aria-hidden="true">#</a> JEP 382: New macOS Rendering Pipeline</h2><p>不知道大家在 macOS 上用 IntelliJ IDEA 或者 Android Studio 会不会觉得卡，就是在本地打字打出了远程控制的感觉的那种卡。</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates-04-mac/07EE223B.gif" alt="img"></p><p>解决办法也很简单，把窗口调小一点儿就行。</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates/image-20210920202342410.png" alt=""></p><p>我有个 2015 款的 MacBook Pro，之前我用它连 4K 外接显示器写代码，发现很快电脑就发烫发热，IDE 也会卡得不成样子。一开始我以为是我的电脑快不行了，后来我发现很多用最新款 MacBook 的人也在抱怨 IntelliJ IDEA 的垃圾性能。</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates/0033dr8Dgy1gskvcr4481g603w02naa802.gif" alt=""></p><p>给 JetBrains 报 Bug，结果发现人家大哥把锅甩给了 JDK。</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates/image-20210920204103615.png" alt=""></p><p>JDK 也不客气，直接用 IntelliJ IDEA 做测试：</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates/image-20210920204435651.png" alt=""></p><p>简单来说就是 Mac 上以前 Java 2D 的 API 是基于 OpenGL 的，从 Java 17 开始则提供了基于最新的 Metal Framework 的实现。目前默认还是基于 OpenGL，这样对于线上的程序几乎没有负面影响，如果大家需要启用 Metal 的支持，则需要在虚拟机参数当中添加：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Dsun.java2d.metal=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Metal 在后面也应该会成为默认选择。</p><p>所以这条更新，建议使用 Mac 的小伙伴们密切关注，也建议开发 Mac 桌面程序的小伙伴尽快适配。</p><p>（跟我有什么关系，Windows 11 YYDS! ）</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates/7103A24A.png" alt=""></p><p>对了，我在 Mac M1 上下载了 Java 17 的 arm64 版本（下一条将会提到），然后用 AppCode（JetBrains 全家桶当中用来写 iOS 程序的 IDE） 替换了这个 JDK，并在 JVM 参数当中配置了：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Dsun.java2d.metal=true

--add-opens=java.desktop/java.awt.event=ALL-UNNAMED
--add-opens=java.desktop/sun.font=ALL-UNNAMED
--add-opens=java.desktop/java.awt=ALL-UNNAMED
--add-opens=java.desktop/sun.awt=ALL-UNNAMED
--add-opens=java.base/java.lang=ALL-UNNAMED
--add-opens=java.base/java.util=ALL-UNNAMED
--add-opens=java.desktop/javax.swing=ALL-UNNAMED
--add-opens=java.desktop/sun.swing=ALL-UNNAMED
--add-opens=java.desktop/javax.swing.plaf.basic=ALL-UNNAMED
--add-opens=java.desktop/java.awt.peer=ALL-UNNAMED
--add-opens=java.desktop/javax.swing.text.html=ALL-UNNAMED
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>外接 4K 显示器以后，代码编写和代码提示的速度有了明显的提升，大家可以试试看（后面的一堆 --add-opens 是为了任意访问没有在 module 当中声明公开的 API，这个策略 Java 17 也有调整，我们后面会讲到）。</p><h2 id="jep-391-macos-aarch64-port" tabindex="-1"><a class="header-anchor" href="#jep-391-macos-aarch64-port" aria-hidden="true">#</a> JEP 391: macOS/AArch64 Port</h2>`,24),p={href:"https://www.azul.com/downloads/?version=java-11-lts&os=macos&architecture=arm-64-bit&package=jdk",target:"_blank",rel:"noopener noreferrer"},m=a("p",null,[a("img",{src:"https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates/image-20210920204728153.png",alt:""})],-1),v={href:"https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html",target:"_blank",rel:"noopener noreferrer"},b=t('<p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates/image-20210920204910901.png" alt=""></p><p>哎，等等，下面的 DMG Installer 是不是丢了个 Arm 啊。。这得扣钱啊小编。</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates/710ABDBF.jpg" alt=""></p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>这两条更新对于 mac 用户来讲还是很有用的，可能会对开发效率的提升影响比较大。</p><h2 id="关于作者" tabindex="-1"><a class="header-anchor" href="#关于作者" aria-hidden="true">#</a> 关于作者</h2><p><strong>霍丙乾 bennyhuo</strong>，Google 开发者专家（Kotlin 方向）；<strong>《深入理解 Kotlin 协程》</strong> 作者（机械工业出版社，2020.6）；<strong>《深入实践 Kotlin 元编程》</strong> 作者（机械工业出版社，2023.8）；移动客户端工程师，先后就职于腾讯地图、猿辅导、腾讯视频。</p>',7),h=a("li",null,"GitHub：https://github.com/bennyhuo",-1),u=a("li",null,"博客：https://www.bennyhuo.com",-1),g={href:"https://space.bilibili.com/28615855",target:"_blank",rel:"noopener noreferrer"},f=a("strong",null,"霍丙乾 bennyhuo",-1),j=a("li",null,[e("微信公众号："),a("strong",null,"霍丙乾 bennyhuo")],-1);function _(A,k){const n=c("ExternalLinkIcon");return o(),i("div",null,[r,a("p",null,[e("噗。。。还记得我司刚给小伙伴们发了一台高贵的 Apple Silicon 的 Air 的时候，有大佬还专门写教程告诉我们去哪儿找 "),a("a",p,[e("arm64 的 JDK"),d(n)]),e("：")]),m,a("p",null,[e("这回 Java 官方终于也支持了，直接到 "),a("a",v,[e("Oracle 的网站"),d(n)]),e("上就能下载，要知道 Java 16 的时候还只有 x86 的版本：")]),b,a("ul",null,[h,u,a("li",null,[e("bilibili："),a("a",g,[f,d(n)])]),j])])}const J=s(l,[["render",_],["__file","04-mac.html.vue"]]);export{J as default};
