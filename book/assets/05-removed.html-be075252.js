import{_ as o,X as p,Y as c,Z as a,a0 as e,$ as t,a1 as s,D as i}from"./framework-98842e7a.js";const l={},r=s(`<h1 id="_5-历史包袱有点儿大-jdk-也在删代码啦" tabindex="-1"><a class="header-anchor" href="#_5-历史包袱有点儿大-jdk-也在删代码啦" aria-hidden="true">#</a> 5. 历史包袱有点儿大，JDK 也在删代码啦</h1><blockquote><p>这次更新有好几条关于移除老代码的，我们来集中介绍一下。</p></blockquote><p>这一次我们主要给大家介绍一下 Java 17 当中移除的这些老古董们。</p><h2 id="jep-398-deprecate-the-applet-api-for-removal" tabindex="-1"><a class="header-anchor" href="#jep-398-deprecate-the-applet-api-for-removal" aria-hidden="true">#</a> JEP 398: Deprecate the Applet API for Removal</h2><p>这一条对大家的影响几乎没有。</p><p>大多数 Java 程序员应该接触过 Servlet，其实在浏览器端对应的还有个 applet，但那已经是很早的时候的东西了。十几年前我开始学 Java 的时候，applet 就已经几乎没有应用场景了，谁又想在打开个网页的时候还要启动一个 Java 虚拟机呢？</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates-05-removed/07F84061.jpg" alt="img"></p><p>随着浏览器对 JavaScript 的支持越来越完善，在浏览器端开发程序的需求都可以轻松地被 JavaScript 满足。终于在 Java 9 发布的时候，applet 被标记为废弃，在 Java 17 它被进一步标记为移除了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Deprecated</span><span class="token punctuation">(</span>since <span class="token operator">=</span> <span class="token string">&quot;9&quot;</span><span class="token punctuation">,</span> forRemoval <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;removal&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Applet</span> <span class="token keyword">extends</span> <span class="token class-name">Panel</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这意味着在 JDK 17 当中，我们还是可以看到 Applet 的，不过它即将在未来的版本当中彻底消失。</p><h2 id="jep-407-remove-rmi-activation" tabindex="-1"><a class="header-anchor" href="#jep-407-remove-rmi-activation" aria-hidden="true">#</a> JEP 407: Remove RMI Activation</h2><p>这个是远程调用相关的一套 API，由于这个东西的维护成本越来越高，用得人越来越少，Java 官方决定把它干掉。实际上这套 API 在 Java 8 被标记为可选，Java 15 被标记为废弃，也算是留足了时间了。</p><p>需要注意的是，移除的只是 java.rmi.activation 包，其他远程调用的能力都不受影响。</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates-05-removed/07FA787F.jpg" alt="img"></p><h2 id="jep-410-remove-the-experimental-aot-and-jit-compiler" tabindex="-1"><a class="header-anchor" href="#jep-410-remove-the-experimental-aot-and-jit-compiler" aria-hidden="true">#</a> JEP 410: Remove the Experimental AOT and JIT Compiler</h2><p>这里提到的 AOT（即 Ahead of time）编译器和 JIT（即 Just in time）编译器是基于 Graal 编译器（使用 Java 实现）开发而来的，它们分别在 Java 9 和 Java 10 被引入 JDK 并开始试验，不过很少有人用它们。</p><p>我们知道 Java 代码编译之后生成虚拟机字节码，由虚拟机负责解释执行。由于字节码并不是机器码，因此笼统的说 Java 代码的执行效率并不如 C/C++ 这样的 Native 语言（当然实际情况要看具体场景，也跟虚拟机的优化有很大的关系）。既然 Native 的机器码执行效率更高，那么我们是不是可以直接把字节码编译成机器码，然后再去执行呢？听上去确实是一个好主意。</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates/747224F9.gif" alt=""></p><p>这也就是 AOT 的由来了。移动端对于性能更加敏感，因而我们更多的时候听到 AOT 这个词是在对 Android ART 和 Flutter 的文档当中。</p><p>JIT 则是在运行的时候对热点代码的实时编译，这个其实 Java 虚拟机一直都有对应的实现（只不过是 C++ 写的）。</p><p>这里要移除的就只是基于 Graal 编译器实现的这俩个实验当中的编译器，理由呢，也很直接：没人用，还难以维护，投入产出比太低了。</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates/74783920.gif" alt=""></p>`,22),d={href:"https://www.graalvm.org/",target:"_blank",rel:"noopener noreferrer"},u=s(`<p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates/image-20210921125108617.png" alt=""></p><p>额，还有 Python、R 和 LLVM：</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates/image-20210921125151101.png" alt=""></p><p>还叫板 LLVM，有点儿东西哦~</p><h2 id="jep-411-deprecate-the-security-manager-for-removal" tabindex="-1"><a class="header-anchor" href="#jep-411-deprecate-the-security-manager-for-removal" aria-hidden="true">#</a> JEP 411: Deprecate the Security Manager for Removal</h2><p>与 applet 类似，SecurityManager 也被标记为废弃且即将移除：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Deprecated</span><span class="token punctuation">(</span>since<span class="token operator">=</span><span class="token string">&quot;17&quot;</span><span class="token punctuation">,</span> forRemoval<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityManager</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一般业务开发不太会用到这个东西，我们就不过多介绍了。</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/6c8656be-f0d8-432e-9bfd-94a1fbd7cd6c/media/Java17-Updates/7580BB3C.jpg" alt=""></p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>Java 官方在决定废弃这几个东西的时候，其实也做了广泛的调查，可能主要还是发现没什么人用吧（当然还有的是他们不希望我们用）。</p><h2 id="关于作者" tabindex="-1"><a class="header-anchor" href="#关于作者" aria-hidden="true">#</a> 关于作者</h2><p><strong>霍丙乾 bennyhuo</strong>，Google 开发者专家（Kotlin 方向）；<strong>《深入理解 Kotlin 协程》</strong> 作者（机械工业出版社，2020.6）；<strong>《深入实践 Kotlin 元编程》</strong> 作者（机械工业出版社，2023.8）；移动客户端工程师，先后就职于腾讯地图、猿辅导、腾讯视频。</p>`,13),m=a("li",null,"GitHub：https://github.com/bennyhuo",-1),h=a("li",null,"博客：https://www.bennyhuo.com",-1),v={href:"https://space.bilibili.com/28615855",target:"_blank",rel:"noopener noreferrer"},b=a("strong",null,"霍丙乾 bennyhuo",-1),k=a("li",null,[e("微信公众号："),a("strong",null,"霍丙乾 bennyhuo")],-1);function g(f,J){const n=i("ExternalLinkIcon");return p(),c("div",null,[r,a("p",null,[e("当然，这也不是说 Java 就不能编译成 Native 二进制可执行程序直接运行，因为我们还有 "),a("a",d,[e("GraalVM"),t(n)]),e("，这家伙居然还支持 Node.js 和 Ruby：")]),u,a("ul",null,[m,h,a("li",null,[e("bilibili："),a("a",v,[b,t(n)])]),k])])}const j=o(l,[["render",g],["__file","05-removed.html.vue"]]);export{j as default};
