import{_ as t,X as e,Y as o,Z as n,a0 as s,$ as p,a1 as c,D as i}from"./framework-98842e7a.js";const l={},u=c(`<h1 id="_3-协程调度篇" tabindex="-1"><a class="header-anchor" href="#_3-协程调度篇" aria-hidden="true">#</a> 3. 协程调度篇</h1><blockquote><p>上一篇我们知道了协程启动的几种模式，也通过示例认识了 <code>launch</code> 启动协程的使用方法，本文将延续这些内容从调度的角度来进一步为大家揭示协程的奥义。</p></blockquote><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/9e300468-a645-433d-ae41-60b3eaa97f5a/media/15550227714805.jpg" alt=""></p><h2 id="_1-协程上下文" tabindex="-1"><a class="header-anchor" href="#_1-协程上下文" aria-hidden="true">#</a> 1. 协程上下文</h2><p>调度器本质上就是一个协程上下文的实现，我们先来介绍下上下文。</p><p>前面我们提到 <code>launch</code> 函数有三个参数，第一个参数叫 <strong>上下文</strong>，它的接口类型是 <code>CoroutineContext</code>，通常我们见到的上下文的类型是 <code>CombinedContext</code> 或者 <code>EmptyCoroutineContext</code>，一个表示上下文的组合，另一个表示什么都没有。我们来看下 <code>CoroutineContext</code> 的接口方法：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@SinceKotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;1.3&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> CoroutineContext <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">operator</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>E <span class="token operator">:</span> Element<span class="token operator">&gt;</span> <span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token operator">:</span> Key<span class="token operator">&lt;</span>E<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> E<span class="token operator">?</span>
    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>R<span class="token operator">&gt;</span> <span class="token function">fold</span><span class="token punctuation">(</span>initial<span class="token operator">:</span> R<span class="token punctuation">,</span> operation<span class="token operator">:</span> <span class="token punctuation">(</span>R<span class="token punctuation">,</span> Element<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> R<span class="token punctuation">)</span><span class="token operator">:</span> R
    <span class="token keyword">public</span> <span class="token keyword">operator</span> <span class="token keyword">fun</span> <span class="token function">plus</span><span class="token punctuation">(</span>context<span class="token operator">:</span> CoroutineContext<span class="token punctuation">)</span><span class="token operator">:</span> CoroutineContext <span class="token operator">=</span> <span class="token operator">..</span><span class="token punctuation">.</span>
    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">minusKey</span><span class="token punctuation">(</span>key<span class="token operator">:</span> Key<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> CoroutineContext

    <span class="token keyword">public</span> <span class="token keyword">interface</span> Key<span class="token operator">&lt;</span>E <span class="token operator">:</span> Element<span class="token operator">&gt;</span>

    <span class="token keyword">public</span> <span class="token keyword">interface</span> Element <span class="token operator">:</span> CoroutineContext <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">val</span> key<span class="token operator">:</span> Key<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span>
        <span class="token operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不知道大家有没有发现，它简直就是一个以 <code>Key</code> 为索引的 <code>List</code>：</p><table><thead><tr><th>CoroutineContext</th><th>List</th></tr></thead><tbody><tr><td>get(Key)</td><td>get(Int)</td></tr><tr><td>plus(CoroutineContext)</td><td>plus(List)</td></tr><tr><td>minusKey(Key)</td><td>removeAt(Int)</td></tr></tbody></table><blockquote><p>表中的 <code>List.plus(List)</code> 实际上指的是扩展方法 <code>Collection&lt;T&gt;.plus(elements: Iterable&lt;T&gt;): List&lt;T&gt;</code></p></blockquote><p><code>CoroutineContext</code> 作为一个集合，它的元素就是源码中看到的 <code>Element</code>，每一个 <code>Element</code> 都有一个 <code>key</code>，因此它可以作为元素出现，同时它也是 <code>CoroutineContext</code> 的子接口，因此也可以作为集合出现。</p><p>讲到这里，大家就会明白，<code>CoroutineContext</code> 原来是个数据结构啊。如果大家对于 <code>List</code> 的递归定义比较熟悉的话，那么对于 <code>CombinedContext</code> 和 <code>EmptyCoroutineContext</code> 也就很容易理解了，例如 scala 的 <code>List</code>是这么定义的：</p><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code><span class="token keyword">sealed</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> List<span class="token punctuation">[</span><span class="token operator">+</span>A<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">def</span> head<span class="token operator">:</span> A
    <span class="token keyword">def</span> tail<span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在模式匹配的时候，<code>List(1,2,3,4)</code> 是可以匹配 <code>x::y</code> 的，<code>x</code> 就是 1，<code>y</code> 则是 <code>List(2,3,4)</code>。</p><p><code>CombinedContext</code> 的定义也非常类似：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token function">CombinedContext</span><span class="token punctuation">(</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> left<span class="token operator">:</span> CoroutineContext<span class="token punctuation">,</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> element<span class="token operator">:</span> Element
<span class="token punctuation">)</span> <span class="token operator">:</span> CoroutineContext<span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只不过它是反过来的，前面是集合，后面是单独的一个元素。我们在协程体里面访问到的 <code>coroutineContext</code> 大多是这个 <code>CombinedContext</code> 类型，表示有很多具体的上下文实现的集合，我们如果想要找到某一个特别的上下文实现，就需要用对应的 <code>Key</code> 来查找，例如：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>coroutineContext<span class="token punctuation">[</span>Job<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// &quot;coroutine#1&quot;:StandaloneCoroutine{Active}@1ff62014</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span>coroutineContext<span class="token punctuation">[</span>Job<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// null，suspend main 虽然也是协程体，但它是更底层的逻辑，因此没有 Job 实例</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <code>Job</code> 实际上是对它的 <code>companion object</code> 的引用</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> Job <span class="token operator">:</span> CoroutineContext<span class="token punctuation">.</span><span class="token function">Element</span> <span class="token punctuation">{</span>
    <span class="token comment">/**
     * Key for [Job] instance in the coroutine context.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">companion</span> <span class="token keyword">object</span> Key <span class="token operator">:</span> CoroutineContext<span class="token punctuation">.</span>Key<span class="token operator">&lt;</span>Job<span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>所以我们也可以仿照 <code>Thread.currentThread()</code> 来一个获取当前 <code>Job</code> 的方法：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">inline</span> <span class="token keyword">fun</span> Job<span class="token punctuation">.</span>Key<span class="token punctuation">.</span><span class="token function">currentJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> coroutineContext<span class="token punctuation">[</span>Job<span class="token punctuation">]</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">coroutineJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span>Job<span class="token punctuation">.</span><span class="token function">currentJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">log</span><span class="token punctuation">(</span>Job<span class="token punctuation">.</span><span class="token function">currentJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>我们可以通过指定上下文为协程添加一些特性，一个很好的例子就是为协程添加名称，方便调试：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token function">CoroutineName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有多个上下文需要添加，直接用 <code>+</code> 就可以了：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Main <span class="token operator">+</span> <span class="token function">CoroutineName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>Dispatchers.Main</code> 是调度器的一个实现，不用担心，我们很快就会认识它了。</p></blockquote><h2 id="_2-协程拦截器" tabindex="-1"><a class="header-anchor" href="#_2-协程拦截器" aria-hidden="true">#</a> 2. 协程拦截器</h2><p>费了好大劲儿说完上下文，这里就要说一个比较特殊的存在了——拦截器。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> ContinuationInterceptor <span class="token operator">:</span> CoroutineContext<span class="token punctuation">.</span><span class="token function">Element</span> <span class="token punctuation">{</span>
    <span class="token keyword">companion</span> <span class="token keyword">object</span> Key <span class="token operator">:</span> CoroutineContext<span class="token punctuation">.</span>Key<span class="token operator">&lt;</span>ContinuationInterceptor<span class="token operator">&gt;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">interceptContinuation</span><span class="token punctuation">(</span>continuation<span class="token operator">:</span> Continuation<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Continuation<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拦截器也是一个上下文的实现方向，拦截器可以左右你的协程的执行，同时为了保证它的功能的正确性，协程上下文集合永远将它放在最后面，这真可谓是天选之子了。</p><p>它拦截协程的方法也很简单，因为协程的本质就是回调 + “黑魔法”，而这个回调就是被拦截的 <code>Continuation</code> 了。用过 OkHttp 的小伙伴一下就兴奋了，拦截器我常用的啊，OkHttp 用拦截器做缓存，打日志，还可以模拟请求，协程拦截器也是一样的道理。调度器就是基于拦截器实现的，换句话说调度器就是拦截器的一种。</p><p>我们可以自己定义一个拦截器放到我们的协程上下文中，看看会发生什么。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> MyContinuationInterceptor<span class="token operator">:</span> ContinuationInterceptor<span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> key <span class="token operator">=</span> ContinuationInterceptor
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">interceptContinuation</span><span class="token punctuation">(</span>continuation<span class="token operator">:</span> Continuation<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">MyContinuation</span><span class="token punctuation">(</span>continuation<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> MyContinuation<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">val</span> continuation<span class="token operator">:</span> Continuation<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Continuation<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> context <span class="token operator">=</span> continuation<span class="token punctuation">.</span>context
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">resumeWith</span><span class="token punctuation">(</span>result<span class="token operator">:</span> Result<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&lt;MyContinuation&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">result</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">)</span>
        continuation<span class="token punctuation">.</span><span class="token function">resumeWith</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们只是在回调处打了一行日志。接下来我们把用例拿出来：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token function">MyContinuationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">val</span> job <span class="token operator">=</span> async <span class="token punctuation">{</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
            <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span>
        <span class="token punctuation">}</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
        <span class="token keyword">val</span> result <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;5. </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">result</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这可能是迄今而止我们给出的最复杂的例子了，不过请大家不要被它吓到，它依然很简单。我们通过 <code>launch</code> 启动了一个协程，为它指定了我们自己的拦截器作为上下文，紧接着在其中用 <code>async</code> 启动了一个协程，<code>async</code> 与 <code>launch</code> 从功能上是同等类型的函数，它们都被称作协程的 Builder 函数，不同之处在于 <code>async</code> 启动的 <code>Job</code> 也就是实际上的 <code>Deferred</code> 可以有返回结果，可以通过 <code>await</code> 方法获取。</p><p>可想而知，<code>result</code> 的值就是 Hello。那么这段程序运行的结果如何呢？</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>15:31:55:989 [main] &lt;MyContinuation&gt; Success(kotlin.Unit)  // ①
15:31:55:992 [main] 1
15:31:56:000 [main] &lt;MyContinuation&gt; Success(kotlin.Unit) // ②
15:31:56:000 [main] 2
15:31:56:031 [main] 4
15:31:57:029 [kotlinx.coroutines.DefaultExecutor] &lt;MyContinuation&gt; Success(kotlin.Unit) // ③
15:31:57:029 [kotlinx.coroutines.DefaultExecutor] 3
15:31:57:031 [kotlinx.coroutines.DefaultExecutor] &lt;MyContinuation&gt; Success(Hello) // ④
15:31:57:031 [kotlinx.coroutines.DefaultExecutor] 5. Hello
15:31:57:031 [kotlinx.coroutines.DefaultExecutor] 6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>“// ①” 不是程序输出的内容，仅为后续讲解方便而做的标注。</p></blockquote><p>大家可能就要奇怪了，你不是说 <code>Continuation</code> 是回调么，这里面回调调用也就一次啊（<code>await</code> 那里），怎么日志打印了四次呢？</p><p>别慌，我们按顺序给大家介绍。</p><p>首先，所有协程启动的时候，都会有一次 <code>Continuation.resumeWith</code> 的操作，这一次操作对于调度器来说就是一次调度的机会，我们的协程有机会调度到其他线程的关键之处就在于此。 ①、② 两处都是这种情况。</p><p>其次，<code>delay</code> 是挂起点，1000ms 之后需要继续调度执行该协程，因此就有了 ③ 处的日志。</p><p>最后，④ 处的日志就很容易理解了，正是我们的返回结果。</p><p>可能有朋友还会有疑问，我并没有在拦截器当中切换线程，为什么从 ③ 处开始有了线程切换的操作？这个切换线程的逻辑源自于 <code>delay</code>，在 JVM 上 <code>delay</code> 实际上是在一个 <code>ScheduledExcecutor</code> 里面添加了一个延时任务，因此会发生线程切换；而在 JavaScript 环境中则是基于 setTimeout，如果运行在 Nodejs 上，<code>delay</code> 就不会切线程了，毕竟人家是单线程的。</p><p>如果我们在拦截器当中自己处理了线程切换，那么就实现了自己的一个简单的调度器，大家有兴趣可以自己去尝试。</p><blockquote><p>思考：拦截器可以有多个吗？</p></blockquote><h2 id="_3-调度器" tabindex="-1"><a class="header-anchor" href="#_3-调度器" aria-hidden="true">#</a> 3. 调度器</h2><h3 id="_3-1-概述" tabindex="-1"><a class="header-anchor" href="#_3-1-概述" aria-hidden="true">#</a> 3.1 概述</h3><p>有了前面的基础，我们对于调度器的介绍就变得水到渠成了。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> CoroutineDispatcher <span class="token operator">:</span>
    <span class="token function">AbstractCoroutineContextElement</span><span class="token punctuation">(</span>ContinuationInterceptor<span class="token punctuation">)</span><span class="token punctuation">,</span> ContinuationInterceptor <span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>context<span class="token operator">:</span> CoroutineContext<span class="token punctuation">,</span> block<span class="token operator">:</span> Runnable<span class="token punctuation">)</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它本身是协程上下文的子类，同时实现了拦截器的接口， <code>dispatch</code> 方法会在拦截器的方法 <code>interceptContinuation</code> 中调用，进而实现协程的调度。所以如果我们想要实现自己的调度器，继承这个类就可以了，不过通常我们都用现成的，它们定义在 <code>Dispatchers</code> 当中：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> Default<span class="token operator">:</span> CoroutineDispatcher
<span class="token keyword">val</span> Main<span class="token operator">:</span> MainCoroutineDispatcher
<span class="token keyword">val</span> Unconfined<span class="token operator">:</span> CoroutineDispatcher
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个类的定义涉及到了 Kotlin MPP 的支持，因此你在 Jvm 版本当中还会看到 <code>val IO: CoroutineDispatcher</code>，在 js 和 native 当中就只有前面提到的这三个了（对 Jvm 好偏心呐）。</p><table><thead><tr><th></th><th>Jvm</th><th>Js</th><th>Native</th></tr></thead><tbody><tr><td>Default</td><td>线程池</td><td>主线程循环</td><td>主线程循环</td></tr><tr><td>Main</td><td>UI 线程</td><td>与 Default 相同</td><td>与 Default 相同</td></tr><tr><td>Unconfined</td><td>直接执行</td><td>直接执行</td><td>直接执行</td></tr><tr><td>IO</td><td>线程池</td><td>--</td><td>--</td></tr></tbody></table><ul><li>IO 仅在 Jvm 上有定义，它基于 Default 调度器背后的线程池，并实现了独立的队列和限制，因此协程调度器从 Default 切换到 IO 并不会触发线程切换。</li><li>Main 主要用于 UI 相关程序，在 Jvm 上包括 Swing、JavaFx、Android，可将协程调度到各自的 UI 线程上。</li><li>Js 本身就是单线程的事件循环，与 Jvm 上的 UI 程序比较类似。</li></ul><h3 id="_3-2-编写-ui-相关程序" tabindex="-1"><a class="header-anchor" href="#_3-2-编写-ui-相关程序" aria-hidden="true">#</a> 3.2 编写 UI 相关程序</h3><p>Kotlin 的用户绝大多数都是 Android 开发者，大家对 UI 的开发需求还是比较大的。我们举一个很常见的场景，点击一个按钮做点儿异步的操作再回调刷新 UI：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>getUserBtn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span> 
    getUser <span class="token punctuation">{</span> user <span class="token operator">-&gt;</span>
        handler<span class="token punctuation">.</span><span class="token function">post</span> <span class="token punctuation">{</span>
            userNameView<span class="token punctuation">.</span>text <span class="token operator">=</span> user<span class="token punctuation">.</span>name
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们简单得给出 <code>getUser</code> 函数的声明：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">typealias</span> Callback <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit

<span class="token keyword">fun</span> <span class="token function">getUser</span><span class="token punctuation">(</span>callback<span class="token operator">:</span> Callback<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 <code>getUser</code> 函数需要切到其他线程执行，因此回调通常也会在这个非 UI 的线程中调用，所以为了确保 UI 正确被刷新，我们需要用 <code>handler.post</code> 切换到 UI 线程。上面的写法就是我们最古老的写法了。</p><p>后来又有了 RxJava，那么事情开始变得有趣了起来：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">getUserObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Observable<span class="token punctuation">.</span>create<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span> emitter <span class="token operator">-&gt;</span>
        getUser <span class="token punctuation">{</span>
            emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>于是点击按钮的事件可以这么写：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>getUserBtn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span>
    <span class="token function">getUserObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">observeOn</span><span class="token punctuation">(</span>AndroidSchedulers<span class="token punctuation">.</span><span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">subscribe</span> <span class="token punctuation">{</span> user <span class="token operator">-&gt;</span>
                userNameView<span class="token punctuation">.</span>text <span class="token operator">=</span> user<span class="token punctuation">.</span>name
            <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实 RxJava 在线程切换上的表现是非常优秀的，也正是如此，很多人甚至用它只是为了切线程方便！</p><p>那么我们现在把这段代码过渡到协程的写法：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">getUserCoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> suspendCoroutine<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    continuation <span class="token operator">-&gt;</span>
    getUser <span class="token punctuation">{</span>
        continuation<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按钮点击时，我们可以：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>getUserBtn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span>
    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        userNameView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token function">getUserCoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>大家也可以用 anko-coroutines 当中的 View.onClick 扩展，这样我们就无需自己在这里用 <code>launch</code> 启动协程了。有关 Anko 对协程的支持，我们后面专门安排一篇文章介绍。</p></blockquote><p>这里又有大家没见过的内容啦，<code>suspendCoroutine</code> 这个方法并不是帮我们启动协程的，它运行在协程当中并且帮我们获取到当前协程的 <code>Continuation</code> 实例，也就是拿到回调，方便后面我们调用它的 <code>resume</code> 或者 <code>resumeWithException</code> 来返回结果或者抛出异常。</p><blockquote><p>如果你重复调用 <code>resume</code> 或者 <code>resumeWithException</code> 会收获一枚 <code>IllegalStateException</code>，仔细想想这是为什么。</p></blockquote><p>对比前面的 RxJava 的做法，你会发现这段代码其实很容易理解，你甚至会发现协程的使用场景与 RxJava 竟是如此的相似。这里我们用到了 <code>Dispatchers.Main</code> 来确保 <code>launch</code> 启动的协程在调度时始终调度到 UI 线程，那么下面我们来看看 <code>Dispatchers.Main</code> 的具体实现。</p><p>在 Jvm 上，<code>Main</code> 的实现也比较有意思：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">internal</span> <span class="token keyword">object</span> MainDispatcherLoader <span class="token punctuation">{</span>
    <span class="token annotation builtin">@JvmField</span>
    <span class="token keyword">val</span> dispatcher<span class="token operator">:</span> MainCoroutineDispatcher <span class="token operator">=</span> <span class="token function">loadMainDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">loadMainDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> MainCoroutineDispatcher <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">val</span> factories <span class="token operator">=</span> MainDispatcherFactory<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> clz <span class="token operator">-&gt;</span>
                ServiceLoader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>clz<span class="token punctuation">,</span> clz<span class="token punctuation">.</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            factories<span class="token punctuation">.</span><span class="token function">maxBy</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>loadPriority <span class="token punctuation">}</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">tryCreateDispatcher</span><span class="token punctuation">(</span>factories<span class="token punctuation">)</span>
                <span class="token operator">?:</span> <span class="token function">MissingMainCoroutineDispatcher</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">MissingMainCoroutineDispatcher</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Android 当中，协程框架通过注册 <code>AndroidDispatcherFactory</code> 使得 <code>Main</code> 最终被赋值为 <code>HandlerDispatcher</code> 的实例，有兴趣的可以去看下 kotlinx-coroutines-android 的源码实现。</p><blockquote><p>注意前面对于 RxJava 和协程的实现，我们都没有考虑异常和取消的问题。有关异常和取消的话题，我们会在后面的文章中详细介绍。</p></blockquote><h3 id="_3-3-绑定到任意线程的调度器" tabindex="-1"><a class="header-anchor" href="#_3-3-绑定到任意线程的调度器" aria-hidden="true">#</a> 3.3 绑定到任意线程的调度器</h3><p>调度器的目的就是切线程，你不要想着我在 <code>dispatch</code> 的时候根据自己的心情来随机调用，那你是在害你自己（不怕各位笑话，这样的代码我还真写过，仅供娱乐）。那么问题就简单了，我们只要提供线程，调度器就应该很方便的创建出来：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> myDispatcher<span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">{</span> r <span class="token operator">-&gt;</span> <span class="token function">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;MyThread&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">asCoroutineDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>myDispatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的信息就表明协程运行在我们自己的线程上。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token number">16</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">57</span><span class="token operator">:</span><span class="token number">130</span> <span class="token punctuation">[</span>MyThread<span class="token punctuation">]</span> <span class="token number">1</span>
<span class="token number">16</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">57</span><span class="token operator">:</span><span class="token number">136</span> <span class="token punctuation">[</span>MyThread<span class="token punctuation">]</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不过请大家注意，由于这个线程池是我们自己创建的，因此我们需要在合适的时候关闭它，不然的话：</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/9ab6e571-684b-4108-9600-a9e3981e7aca/media/15546248040111.jpg" alt=""></p><p>我们可以通过主动关闭线程池或者调用：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>myDispatcher<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来结束它的生命周期，再次运行程序就会正常退出了。</p><p><img src="https://kotlinblog-1251218094.costj.myqcloud.com/9ab6e571-684b-4108-9600-a9e3981e7aca/media/15546249279403.jpg" alt=""></p><p>当然有人会说你创建的线程池的线程不是 daemon 的，所以主线程结束时 Jvm 不会停止运行。说的没错，但该释放的还是要及时释放，如果你只是在程序的整个生命周期当中短暂的用了一下这个调度器，那么一直不关闭它对应的线程池岂不是会有线程泄露吗？这就很尴尬了。</p><p>Kotlin 协程设计者也特别害怕大家注意不到这一点，还特地废弃了两个 API 并且开了一个 issue 说我们要重做这套 API，这两个可怜的家伙是谁呢？</p><p><strong>废弃的两个基于线程池创建调度器的 API</strong></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">newSingleThreadContext</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> ExecutorCoroutineDispatcher
<span class="token keyword">fun</span> <span class="token function">newFixedThreadPoolContext</span><span class="token punctuation">(</span>nThreads<span class="token operator">:</span> Int<span class="token punctuation">,</span> name<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> ExecutorCoroutineDispatcher
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这二者可以很方便的创建绑定到特定线程的调度器，但过于简洁的 API 似乎会让人忘记它的风险。Kotlin 一向不爱做这种不清不楚的事儿，所以您呢，还是像我们这一节例子当中那样自己去构造线程池吧，这样好歹自己忘了关闭也怨不着别人（哈哈哈）。</p><p>其实在多个线程上运行协程，线程总是这样切来切去其实并不会显得很轻量级，例如下面的例子就是比较可怕的了：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">asCoroutineDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">{</span> dispatcher <span class="token operator">-&gt;</span>
            GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>dispatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token keyword">val</span> job <span class="token operator">=</span> async <span class="token punctuation">{</span>
                    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
                    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
                    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
                    <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span>
                <span class="token punctuation">}</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
                <span class="token keyword">val</span> result <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;5. </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">result</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面除了 <code>delay</code> 那里有一次不可避免的线程切换外，其他几处协程挂起点的继续操作（<code>Continuation.resume</code>）都会切线程：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>16:28:04:771 [pool-1-thread-1] 1
16:28:04:779 [pool-1-thread-1] 4
16:28:04:779 [pool-1-thread-2] 2
16:28:05:790 [pool-1-thread-3] 3
16:28:05:793 [pool-1-thread-4] 5. Hello
16:28:05:794 [pool-1-thread-4] 6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们的线程池只开 1 个线程，那么这里所有的输出都将在这唯一的线程中打印：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>16:40:14:685 [pool-1-thread-1] 1
16:40:14:706 [pool-1-thread-1] 4
16:40:14:710 [pool-1-thread-1] 2
16:40:15:723 [pool-1-thread-1] 3
16:40:15:725 [pool-1-thread-1] 5. Hello
16:40:15:725 [pool-1-thread-1] 6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比这二者，10个线程的情况线程切换次数最少 3次，而 1 个线程的情况则只要 <code>delay</code> 1000ms 之后恢复执行的时候那一次。只是多两次线程切换，到底会有多大影响呢？我在我自己的 2015 款 mbp 上对于两种不同的情况分别循环运行 100 次，得到的平均时间如下：</p><table><thead><tr><th>线程数</th><th>10</th><th>1</th></tr></thead><tbody><tr><td>耗时ms</td><td>1006.00</td><td>1004.97</td></tr></tbody></table><blockquote><p>注意，为了测试的公平性，在运行 100 次循环之前已经做好了预热，确保所有类都已经加载。测试结果仅供参考。</p></blockquote><p>也就是说多两次线程切换平均能多出 1ms 的耗时。生产环境当中的代码当然会更复杂，如果这样用线程池去调度，结果可想而知。</p><p>实际上通常我们只需要在一个线程当中处理自己的业务逻辑，只有一些耗时的 IO 才需要切换到 IO 线程中处理，所以好的做法可以参考 UI 对应的调度器，自己通过线程池定义调度器的做法本身没什么问题，但最好只用一个线程，因为多线程除了前面说的线程切换的开销外，还有线程安全的问题。</p><h3 id="_3-4-线程安全问题" tabindex="-1"><a class="header-anchor" href="#_3-4-线程安全问题" aria-hidden="true">#</a> 3.4 线程安全问题</h3><p>Js 和 Native 的并发模型与 Jvm 不同，Jvm 暴露了线程 API 给用户，这也使得协程的调度可以由用户更灵活的选择。越多的自由，意味着越多的代价，我们在 Jvm 上面编写协程代码时需要明白一点的是，线程安全问题在调度器不同的协程之间仍然存在。</p><p>好的做法，就像我们前面一节提到的，尽量把自己的逻辑控制在一个线程之内，这样一方面节省了线程切换的开销，另一方面还可以避免线程安全问题，两全其美。</p><p>如果大家在协程代码中使用锁之类的并发工具就反而增加了代码的复杂度，对此我的建议是大家在编写协程代码时尽量避免对外部作用域的可变变量进行引用，尽量使用参数传递而非对全局变量进行引用。</p><p>以下是一个错误的例子，大家很容易就能想明白：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>
    Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">asCoroutineDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">{</span> dispatcher <span class="token operator">-&gt;</span>
                <span class="token function">List</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>dispatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        i<span class="token operator">++</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
                    it<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
    <span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>16:59:28:080 [main] 999593
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-suspend-main-函数如何调度" tabindex="-1"><a class="header-anchor" href="#_4-suspend-main-函数如何调度" aria-hidden="true">#</a> 4. suspend main 函数如何调度？</h2><p>上一篇文章我们提到了 suspend main 会启动一个协程，我们示例中的协程都是它的子协程，可是这个最外层的协程到底是怎么来的呢？</p><p>我们先给出一个例子：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它等价于下面的写法：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    runSuspend <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那你说这个 <code>runSuspend</code> 又是何妨神圣？它是 Kotlin 标准库的一个方法，注意它不是 kotlinx.coroutines 当中的，它实际上属于更底层的 API 了。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">internal</span> <span class="token keyword">fun</span> <span class="token function">runSuspend</span><span class="token punctuation">(</span>block<span class="token operator">:</span> <span class="token keyword">suspend</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> run <span class="token operator">=</span> <span class="token function">RunSuspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    block<span class="token punctuation">.</span><span class="token function">startCoroutine</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span>
    run<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而这里面的 <code>RunSuspend</code> 则是 <code>Continuation</code> 的实现：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">class</span> RunSuspend <span class="token operator">:</span> Continuation<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> context<span class="token operator">:</span> CoroutineContext
        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> EmptyCoroutineContext

    <span class="token keyword">var</span> result<span class="token operator">:</span> Result<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">resumeWith</span><span class="token punctuation">(</span>result<span class="token operator">:</span> Result<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token function">result</span>
        <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">as</span> Object<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">null</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">as</span> Object<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    result<span class="token punctuation">.</span><span class="token function">getOrThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// throw up failure</span>
                    <span class="token keyword">return</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的上下文是空的，因此 suspend main 启动的协程并不会有任何调度行为。</p><p>通过这个例子我们可以知道，实际上启动一个协程只需要有一个 lambda 表达式就可以了，想当年 Kotlin 1.1 刚发布的时候，我写了一系列的教程都是以标准库 API 为基础的，后来发现标准库的 API 也许真的不是给我们用的，所以看看就好。</p><blockquote><p>上述代码在标准库当中被修饰为 <code>internal</code>，因此我们无法直接使用它们。不过你可以把 <strong>RunSuspend.kt</strong> 当中的内容复制到你的工程当中，这样你就可以直接使用啦，其中的 <code>var result: Result&lt;Unit&gt;? = null</code> 可能会报错，没关系，改成 <code>private var result: Result&lt;Unit&gt;? = null</code> 就可以了。</p></blockquote><h2 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结" aria-hidden="true">#</a> 5. 小结</h2><p>在这篇文章当中，我们介绍了协程上下文，介绍了拦截器，进而最终引出了我们的调度器，截止目前，我们还有异常处理、协程取消、Anko 对协程的支持等话题没有讲到，如果大家有协程相关想了解的话题，可以留言哈~</p><h2 id="关于作者" tabindex="-1"><a class="header-anchor" href="#关于作者" aria-hidden="true">#</a> 关于作者</h2><p><strong>霍丙乾 bennyhuo</strong>，Google 开发者专家（Kotlin 方向）；<strong>《深入理解 Kotlin 协程》</strong> 作者（机械工业出版社，2020.6）；<strong>《深入实践 Kotlin 元编程》</strong> 作者（机械工业出版社，2023.8）；移动客户端工程师，先后就职于腾讯地图、猿辅导、腾讯视频。</p>`,131),r=n("li",null,"GitHub：https://github.com/bennyhuo",-1),d=n("li",null,"博客：https://www.bennyhuo.com",-1),k={href:"https://space.bilibili.com/28615855",target:"_blank",rel:"noopener noreferrer"},v=n("strong",null,"霍丙乾 bennyhuo",-1),m=n("li",null,[s("微信公众号："),n("strong",null,"霍丙乾 bennyhuo")],-1);function b(g,h){const a=i("ExternalLinkIcon");return e(),o("div",null,[u,n("ul",null,[r,d,n("li",null,[s("bilibili："),n("a",k,[v,p(a)])]),m])])}const f=t(l,[["render",b],["__file","03-dispatchers.html.vue"]]);export{f as default};
