import{_ as e,X as t,Y as p,Z as n,a0 as s,$ as o,a1 as c,D as l}from"./framework-98842e7a.js";const i={},u=c(`<h1 id="_6-协程挂起篇" tabindex="-1"><a class="header-anchor" href="#_6-协程挂起篇" aria-hidden="true">#</a> 6. 协程挂起篇</h1><blockquote><p>协程的挂起最初是一个很神秘的东西，因为我们总是用线程的概念去思考，所以我们只能想到阻塞。不阻塞的挂起到底是怎么回事呢？说出来你也许会笑~~（哭？。。抱歉这篇文章我实在是没办法写的更通俗易懂了，大家一定要亲手实践！）</p></blockquote><h2 id="_1-先看看-delay" tabindex="-1"><a class="header-anchor" href="#_1-先看看-delay" aria-hidden="true">#</a> 1. 先看看 delay</h2><p>我们刚刚学线程的时候，最常见的模拟各种延时用的就是 <code>Thread.sleep</code> 了，而在协程里面，对应的就是 <code>delay</code>。<code>sleep</code> 让线程进入休眠状态，直到指定时间之后某种信号或者条件到达，线程就尝试恢复执行，而 <code>delay</code> 会让协程挂起，这个过程并不会阻塞 CPU，甚至可以说从硬件使用效率上来讲是“什么都不耽误”，从这个意义上讲 <code>delay</code> 也可以是让协程休眠的一种很好的手段。</p><p><code>delay</code> 的源码其实很简单：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">delay</span><span class="token punctuation">(</span>timeMillis<span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeMillis <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token comment">// don&#39;t delay</span>
    <span class="token keyword">return</span> suspendCancellableCoroutine <span class="token label symbol">sc@</span> <span class="token punctuation">{</span> cont<span class="token operator">:</span> CancellableContinuation<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token operator">-&gt;</span>
        cont<span class="token punctuation">.</span>context<span class="token punctuation">.</span>delay<span class="token punctuation">.</span><span class="token function">scheduleResumeAfterDelay</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">,</span> cont<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cont.context.delay.scheduleResumeAfterDelay</code> 这个操作，你可以类比 JavaScript 的 <code>setTimeout</code>，Android 的 <code>handler.postDelay</code>，本质上就是设置了一个延时回调，时间一到就调用 <code>cont</code> 的 resume 系列方法让协程继续执行。</p><p>剩下的最关键的就是 <code>suspendCancellableCoroutine</code> 了，这可是我们的老朋友了，前面我们用它实现了回调到协程的各种转换 —— 原来 <code>delay</code> 也是基于它实现的，如果我们再多看一些源码，你就会发现类似的还有 <code>join</code>、<code>await</code> 等等。</p><h2 id="_2-再来说说-suspendcancellablecoroutine" tabindex="-1"><a class="header-anchor" href="#_2-再来说说-suspendcancellablecoroutine" aria-hidden="true">#</a> 2. 再来说说 suspendCancellableCoroutine</h2><p>既然大家对于 <code>suspendCancellableCoroutine</code> 已经很熟悉了，那么我们干脆直接召唤一个老朋友给大家：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">joinSuspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> suspendCancellableCoroutine<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span> cont <span class="token operator">-&gt;</span>
    cont<span class="token punctuation">.</span><span class="token function">disposeOnCancellation</span><span class="token punctuation">(</span><span class="token function">invokeOnCompletion</span><span class="token punctuation">(</span>handler <span class="token operator">=</span> <span class="token function">ResumeOnCompletion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> cont<span class="token punctuation">)</span><span class="token punctuation">.</span>asHandler<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Job.join()</code> 这个方法会首先检查调用者 <code>Job</code> 的状态是否已经完成，如果是，就直接返回并继续执行后面的代码而不再挂起，否则就会走到这个 <code>joinSuspend</code> 的分支当中。我们看到这里只是注册了一个完成时的回调，那么传说中的 <code>suspendCancellableCoroutine</code> 内部究竟做了什么呢？</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">suspend</span> <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">suspendCancellableCoroutine</span><span class="token punctuation">(</span>
    <span class="token keyword">crossinline</span> block<span class="token operator">:</span> <span class="token punctuation">(</span>CancellableContinuation<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit
<span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token operator">=</span>
    suspendCoroutineUninterceptedOrReturn <span class="token punctuation">{</span> uCont <span class="token operator">-&gt;</span>
        <span class="token keyword">val</span> cancellable <span class="token operator">=</span> <span class="token function">CancellableContinuationImpl</span><span class="token punctuation">(</span>uCont<span class="token punctuation">.</span><span class="token function">intercepted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resumeMode <span class="token operator">=</span> MODE_CANCELLABLE<span class="token punctuation">)</span>
        <span class="token function">block</span><span class="token punctuation">(</span>cancellable<span class="token punctuation">)</span>
        cancellable<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 这里的类型是 Any?</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>suspendCoroutineUninterceptedOrReturn</code> 这个方法调用的源码是看不到的，因为它根本没有源码：P 它的逻辑就是帮大家拿到 <code>Continuation</code> 实例，真的就只有这样。不过这样说起来还是很抽象，因为有一处非常的可疑：<code>suspendCoroutineUninterceptedOrReturn</code> 的返回值类型是 <code>T</code>，而传入的 lambda 的返回值类型是 <code>Any?</code>， 也就是我们看到的 <code>cancellable.getResult()</code> 的类型是 <code>Any?</code>，这是为什么？</p><p>我记得在协程系列文章的开篇，我就提到过 <code>suspend</code> 函数的签名，当时是以 <code>await</code> 为例的，这个方法大致相当于：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">await</span><span class="token punctuation">(</span>continuation<span class="token operator">:</span> Continuation<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Any <span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>suspend</code> 一方面为这个方法添加了一个 <code>Continuation</code> 的参数，另一方面，原先的返回值类型 <code>User</code> 成了 <code>Continuation</code> 的泛型实参，而真正的返回值类型竟然是 <code>Any</code>。当然，这里因为定义的逻辑返回值类型 <code>User</code> 是不可空的，因此真实的返回值类型也用了 <code>Any</code> 来示意，如果泛型实参是个可空的类型，那么真实的返回值类型也就是 <code>Any?</code> 了，这正与前面提到的 <code>cancellable.getResult()</code> 返回的这个 <code>Any?</code> 相对应。</p><blockquote><p>如果大家去查 <code>await</code> 的源码，你同样会看到这个 <code>getResult()</code> 的调用。</p></blockquote><p>简单来说就是，对于 <code>suspend</code> 函数，不是一定要挂起的，可以在需要的时候挂起，也就是要等待的协程还没有执行完的时候，等待协程执行完再继续执行；而如果在开始 <code>join</code> 或者 <code>await</code> 或者其他 <code>suspend</code> 函数，如果目标协程已经完成，那么就没必要等了，直接拿着结果走人即可。那么这个神奇的逻辑就在于 <code>cancellable.getResult()</code> 究竟返回什么了，且看：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">internal</span> <span class="token keyword">fun</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Any<span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trySuspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> COROUTINE_SUSPENDED <span class="token comment">// ① 触发挂起逻辑</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token keyword">is</span> CompletedExceptionally<span class="token punctuation">)</span>  <span class="token comment">// ② 异常立即抛出</span>
        <span class="token keyword">throw</span> <span class="token function">recoverStackTrace</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>cause<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span> 
    <span class="token keyword">return</span> <span class="token function">getSuccessfulResult</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token comment">// ③ 正常结果立即返回</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码 ① 处就是挂起逻辑了，表示这时候目标协程还没有执行完，需要等待结果，②③是协程已经执行完可以直接拿到异常和正常结果的两种情况。②③好理解，关键是 ①，它要挂起，这返回的是个什么东西？</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">val</span> COROUTINE_SUSPENDED<span class="token operator">:</span> Any <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> CoroutineSingletons<span class="token punctuation">.</span>COROUTINE_SUSPENDED

<span class="token keyword">internal</span> <span class="token keyword">enum</span> <span class="token keyword">class</span> CoroutineSingletons <span class="token punctuation">{</span> COROUTINE_SUSPENDED<span class="token punctuation">,</span> UNDECIDED<span class="token punctuation">,</span> RESUMED <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是 1.3 的实现，1.3 以前的实现更有趣，就是一个白板 <code>Any</code>。其实是什么不重要，关键是这个东西是一个单例，任何时候协程见到它就知道自己该挂起了。</p><h2 id="_3-深入挂起操作" tabindex="-1"><a class="header-anchor" href="#_3-深入挂起操作" aria-hidden="true">#</a> 3. 深入挂起操作</h2><p>既然说到挂起，大家可能觉得还是一知半解，还是不知道挂起究竟怎么做到的，怎么办？说真的这个挂起是个什么操作其实一直没有拿出来给大家看，不是我们太小气了，只是太早拿出来会比较吓人。。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> suspendCoroutineUninterceptedOrReturn<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">{</span>
    continuation <span class="token operator">-&gt;</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    thread <span class="token punctuation">{</span>
        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        continuation<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    COROUTINE_SUSPENDED
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我写了这么一个 <code>suspend</code> 函数，在 <code>suspendCoroutineUninterceptedOrReturn</code> 当中直接返回了这个传说中的白板 <code>COROUTINE_SUSPENDED</code>，正常来说我们应该在一个协程当中调用这个方法对吧，可是我偏不，我写一段 Java 代码去调用这个方法，结果会怎样呢？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallCoroutine</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> value <span class="token operator">=</span> <span class="token class-name">SuspendTestKt</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Continuation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@NotNull</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">CoroutineContext</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">EmptyCoroutineContext</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">resumeWith</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// ①</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token function">handleResult</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Throwable</span> throwable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
                    throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token class-name">IntrinsicsKt</span><span class="token punctuation">.</span><span class="token function">getCOROUTINE_SUSPENDED</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// ②</span>
            <span class="token class-name">LogKt</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Suspended.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">handleResult</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">handleResult</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">LogKt</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The result is &quot;</span> <span class="token operator">+</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码看上去比较奇怪，可能会让人困惑的有两处：</p><p>① 处，我们在 Kotlin 当中看到的 <code>resumeWith</code> 的参数类型是 <code>Result</code>，怎么这儿成了 <code>Object</code> 了？因为 <code>Result</code> 是内联类，编译时会用它唯一的成员替换掉它，因此就替换成了 <code>Object</code> （在Kotlin 里面是 <code>Any?</code>）</p><p>② 处 <code>IntrinsicsKt.getCOROUTINE_SUSPENDED()</code> 就是 Kotlin 的 <code>COROUTINE_SUSPENDED</code></p><p>剩下的其实并不难理解，运行结果自然就是如下所示了：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>07:52:55:288 [main] 1
07:52:55:293 [main] 3
07:52:55:296 [main] Suspended.
07:52:56:298 [Thread-0] 2
07:52:56:306 [Thread-0] The result is 1024
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实这段 Java 代码的调用方式与 Kotlin 下面的调用已经很接近了：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只不过我们在 Kotlin 当中还是不太容易拿到 <code>hello</code> 在挂起时的真正返回值，其他的返回结果完全相同。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>12:44:08:290 [main] 1
12:44:08:292 [main] 3
12:44:09:296 [Thread-0] 2
12:44:09:296 [Thread-0] 1024
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很有可能你看到这里都会觉得晕头转向，没有关系，我现在已经开始尝试揭示一些协程挂起的背后逻辑了，比起简单的使用，概念的理解和接受需要有个小小的过程。</p><h2 id="_4-深入理解协程的状态转移" tabindex="-1"><a class="header-anchor" href="#_4-深入理解协程的状态转移" aria-hidden="true">#</a> 4. 深入理解协程的状态转移</h2><p>前面我们已经对协程的原理做了一些揭示，显然 Java 的代码让大家能够更容易理解，那么接下来我们再来看一个更复杂的例子：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">returnSuspended</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> suspendCoroutineUninterceptedOrReturn<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">{</span>
    continuation <span class="token operator">-&gt;</span>
    thread <span class="token punctuation">{</span>
        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
        continuation<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Return suspended.&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    COROUTINE_SUSPENDED
<span class="token punctuation">}</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">returnImmediately</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> suspendCoroutineUninterceptedOrReturn<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token string-literal singleline"><span class="token string">&quot;Return immediately.&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们首先定义两个挂起函数，第一个会真正挂起，第二个则会直接返回结果，这类似于我们前面讨论 <code>join</code> 或者 <code>await</code> 的两条路径。我们再用 Kotlin 给出一个调用它们的例子：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token function">returnSuspended</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token function">returnImmediately</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>08:09:37:090 [main] 1
08:09:38:096 [Thread-0] Return suspended.
08:09:38:096 [Thread-0] 2
08:09:39:141 [kotlinx.coroutines.DefaultExecutor] 3
08:09:39:141 [kotlinx.coroutines.DefaultExecutor] Return immediately.
08:09:39:141 [kotlinx.coroutines.DefaultExecutor] 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好，现在我们要揭示这段协程代码的真实面貌，为了做到这一点，我们用 Java 来仿写一下这段逻辑：</p><blockquote><p>注意，下面的代码逻辑上并不能做到十分严谨，不应该出现在生产当中，仅供学习理解协程使用。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContinuationImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Continuation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> label <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Continuation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Unit</span><span class="token punctuation">&gt;</span></span> completion<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ContinuationImpl</span><span class="token punctuation">(</span><span class="token class-name">Continuation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Unit</span><span class="token punctuation">&gt;</span></span> completion<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>completion <span class="token operator">=</span> completion<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">CoroutineContext</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">EmptyCoroutineContext</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">resumeWith</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Object</span> result <span class="token operator">=</span> o<span class="token punctuation">;</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>label<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token class-name">LogKt</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    result <span class="token operator">=</span> <span class="token class-name">SuspendFunctionsKt</span><span class="token punctuation">.</span><span class="token function">returnSuspended</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    label<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSuspended</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token class-name">LogKt</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">LogKt</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    result <span class="token operator">=</span> <span class="token class-name">DelayKt</span><span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    label<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSuspended</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token class-name">LogKt</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    result <span class="token operator">=</span> <span class="token class-name">SuspendFunctionsKt</span><span class="token punctuation">.</span><span class="token function">returnImmediately</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    label<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSuspended</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token punctuation">{</span>
                    <span class="token class-name">LogKt</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">LogKt</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            completion<span class="token punctuation">.</span><span class="token function">resumeWith</span><span class="token punctuation">(</span><span class="token class-name">Unit</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            completion<span class="token punctuation">.</span><span class="token function">resumeWith</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isSuspended</span><span class="token punctuation">(</span><span class="token class-name">Object</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> result <span class="token operator">==</span> <span class="token class-name">IntrinsicsKt</span><span class="token punctuation">.</span><span class="token function">getCOROUTINE_SUSPENDED</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们定义了一个 Java 类 <code>ContinuationImpl</code>，它就是一个 <code>Continuation</code> 的实现。</p><blockquote><p>实际上如果你愿意，你还真得可以在 Kotlin 的标准库当中找到一个名叫 <code>ContinuationImpl</code> 的类，只不过，它的 <code>resumeWith</code> 最终调用到了 <code>invokeSuspend</code>，而这个 <code>invokeSuspend</code> 实际上就是我们的协程体，通常也就是一个 Lambda 表达式 —— 我们通过 <code>launch</code>启动协程，传入的那个 Lambda 表达式，实际上会被编译成一个 <code>SuspendLambda</code> 的子类，而它又是 <code>ContinuationImpl</code> 的子类。</p></blockquote><p>有了这个类我们还需要准备一个 completion 用来接收结果，这个类仿照标准库的 <code>RunSuspend</code> 类实现，如果你有阅读前面的文章，那么你应该知道 suspend main 的实现就是基于这个类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunSuspend</span> <span class="token keyword">implements</span> <span class="token class-name">Continuation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Unit</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Object</span> result<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">CoroutineContext</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">EmptyCoroutineContext</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">resumeWith</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token class-name">Object</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
            <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 协程已经结束，通知下面的 wait() 方法停止阻塞</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">Object</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用了 Object.wait()，阻塞当前线程，在 notify 或者 notifyAll 调用时返回</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">Throwable</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span><span class="token punctuation">)</span> result<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码的关键点在于 <code>await()</code> 方法，它在其中起了一个死循环，不过大家不要害怕，这个死循环是个纸老虎，如果 <code>result</code> 是 <code>null</code>，那么当前线程会被立即阻塞，直到结果出现。具体的使用方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">RunSuspend</span> runSuspend <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RunSuspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ContinuationImpl</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContinuationImpl</span><span class="token punctuation">(</span>runSuspend<span class="token punctuation">)</span><span class="token punctuation">;</span>
        table<span class="token punctuation">.</span><span class="token function">resumeWith</span><span class="token punctuation">(</span><span class="token class-name">Unit</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        runSuspend<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这写法简直就是 suspend main 的真实面貌了。</p></blockquote><p>我们看到，作为 completion 传入的 <code>RunSuspend</code> 实例的 <code>resumeWith</code> 实际上是在 <code>ContinuationImpl</code> 的 <code>resumeWtih</code> 的最后才会被调用，因此它的 <code>await()</code> 一旦进入阻塞态，直到 <code>ContinuationImpl</code> 的整体状态流转完毕才会停止阻塞，此时进程也就运行完毕正常退出了。</p><p>于是这段代码的运行结果如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>08:36:51:305 [main] 1
08:36:52:315 [Thread-0] Return suspended.
08:36:52:315 [Thread-0] 2
08:36:53:362 [kotlinx.coroutines.DefaultExecutor] 3
08:36:53:362 [kotlinx.coroutines.DefaultExecutor] Return immediately.
08:36:53:362 [kotlinx.coroutines.DefaultExecutor] 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看到，这段普通的 Java 代码与前面的 Kotlin 协程调用完全一样。那么我这段 Java 代码的编写根据是什么呢？就是 Kotlin 协程编译之后产生的字节码。当然，字节码是比较抽象的，我这样写出来就是为了让大家更容易的理解协程是如何执行的，看到这里，相信大家对于协程的本质有了进一步的认识：</p><ul><li>协程的挂起函数本质上就是一个回调，回调类型就是 <code>Continuation</code></li><li>协程体的执行就是一个状态机，每一次遇到挂起函数，都是一次状态转移，就像我们前面例子中的 <code>label</code> 不断的自增来实现状态流转一样</li></ul><p>如果能够把这两点认识清楚，那么相信你在学习协程其他概念的时候就都将不再是问题了。如果想要进行线程调度，就按照我们讲到的调度器的做法，在 <code>resumeWith</code> 处执行线程切换就好了，其实非常容易理解的。官方的协程框架本质上就是在做这么几件事儿，如果你去看源码，可能一时云里雾里，主要是因为框架除了实现核心逻辑外还需要考虑跨平台实现，还需要优化性能，但不管怎么样，这源码横竖看起来就是五个字：状态机回调。</p><h2 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结" aria-hidden="true">#</a> 5. 小结</h2><p>不同以往，我们从这一篇开始毫无保留的为大家尝试揭示协程背后的逻辑，也许一时间可能有些难懂，不过不要紧，你可以使用协程一段时间之后再来阅读这些内容，相信一定会豁然开朗的。</p><p>当然，这一篇内容的安排更多是为后面的序列篇开路，Kotlin 的 <code>Sequence</code> 就是基于协程实现的，它的用法很简单，几乎与普通的 <code>Iterable</code> 没什么区别，因此序列篇我们会重点关注它的内部实现原理，欢迎大家关注。</p><h2 id="关于作者" tabindex="-1"><a class="header-anchor" href="#关于作者" aria-hidden="true">#</a> 关于作者</h2><p><strong>霍丙乾 bennyhuo</strong>，Google 开发者专家（Kotlin 方向）；<strong>《深入理解 Kotlin 协程》</strong> 作者（机械工业出版社，2020.6）；<strong>《深入实践 Kotlin 元编程》</strong> 作者（机械工业出版社，2023.8）；移动客户端工程师，先后就职于腾讯地图、猿辅导、腾讯视频。</p>`,66),d=n("li",null,"GitHub：https://github.com/bennyhuo",-1),k=n("li",null,"博客：https://www.bennyhuo.com",-1),r={href:"https://space.bilibili.com/28615855",target:"_blank",rel:"noopener noreferrer"},v=n("strong",null,"霍丙乾 bennyhuo",-1),m=n("li",null,[s("微信公众号："),n("strong",null,"霍丙乾 bennyhuo")],-1);function b(y,g){const a=l("ExternalLinkIcon");return t(),p("div",null,[u,n("ul",null,[d,k,n("li",null,[s("bilibili："),n("a",r,[v,o(a)])]),m])])}const h=e(i,[["render",b],["__file","06-suspend.html.vue"]]);export{h as default};
