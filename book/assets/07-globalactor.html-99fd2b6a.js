import{_ as p,X as o,Y as c,Z as n,a0 as s,$ as t,a1 as e,D as l}from"./framework-98842e7a.js";const i={},u=e(`<h1 id="_7-globalactor-和异步函数的调度" tabindex="-1"><a class="header-anchor" href="#_7-globalactor-和异步函数的调度" aria-hidden="true">#</a> 7. GlobalActor 和异步函数的调度</h1><blockquote><p>我们已经知道可以使用 actor 来确保数据的线程安全，但对于数据的保护总是需要定义专门的 actor 实例是不是太麻烦了一些？</p></blockquote><h2 id="什么是-globalactor" tabindex="-1"><a class="header-anchor" href="#什么是-globalactor" aria-hidden="true">#</a> 什么是 GlobalActor</h2><p>前面我们为了保护特定的状态，就把这些状态包装到一个特定的 actor 实例当中，保护的方式就是将对于这些状态的访问调度到相应的 actor 的调度器当中串行执行。</p><p>那么问题来了，如果我有很多分散到不同类甚至不同模块的状态，希望统一调度，该怎么办？最典型的例子就是将 UI 操作调度到主线程，UI 本身就分散在不同的组件当中，对于 UI 的操作更是如此。为了应对这种场景，Swift 在提供了 actor 的基础上又进一步提供了 GlobalActor，旨在提供全局统一的执行调度。</p><p>GlobalActor 是一个协议，我们来看一下它的定义：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">public</span> <span class="token keyword">protocol</span> <span class="token class-name">GlobalActor</span> <span class="token punctuation">{</span>

    <span class="token keyword">associatedtype</span> <span class="token class-name">ActorType</span> <span class="token punctuation">:</span> _Concurrency<span class="token punctuation">.</span><span class="token class-name">Actor</span>

    <span class="token keyword">static</span> <span class="token keyword">var</span> shared<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">ActorType</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">var</span> sharedUnownedExecutor<span class="token punctuation">:</span> _Concurrency<span class="token punctuation">.</span><span class="token class-name">UnownedSerialExecutor</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>ActorType</code> 是实现 <code>GlobalActor</code> 协议的类型需要提供的全局唯一的 actor 的类型</li><li><code>shared</code> 是上述全局唯一的 actor 的实例</li><li><code>sharedUnownedExecutor</code> 是上述全局唯一的 actor 实例的调度器，它的值要求与 <code>shared.unownedExecutor</code> 一致</li></ul><p>所以只要确定了 <code>shared</code> 是谁，那么这个 <code>GlobalActor</code> 也就确定了。</p><p>此外，一个类型在实现 <code>GlobalActor</code> 时，我们还可以用 <code>@globalActor</code> 来修饰它，这样我们就可以用这个实现类去修饰需要使用该 <code>GlobalActor</code> 的实现类来隔离的函数或者属性了。这么说比较抽象，我们接下来看看官方目前提供的唯一一个 <code>GlobalActor</code> 实现是怎么定义的。</p><h2 id="探索-mainactor" tabindex="-1"><a class="header-anchor" href="#探索-mainactor" aria-hidden="true">#</a> 探索 MainActor</h2><p><code>MainActor</code> 是目前唯一一个 <code>GlobalActor</code> 的实现，它用来将对属性或者函数的访问隔离到主线程上执行。我们来看看它的定义：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token attribute atrule">@globalActor</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">actor</span> <span class="token class-name">MainActor</span><span class="token punctuation">:</span> <span class="token class-name">GlobalActor</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">let</span> shared <span class="token operator">=</span> <span class="token class-name">MainActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token attribute atrule">@inlinable</span>
  <span class="token keyword">public</span> <span class="token keyword">nonisolated</span> <span class="token keyword">var</span> unownedExecutor<span class="token punctuation">:</span> <span class="token class-name">UnownedSerialExecutor</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">UnownedSerialExecutor</span><span class="token punctuation">(</span><span class="token class-name">Builtin</span><span class="token punctuation">.</span><span class="token function">buildMainActorExecutorRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token attribute atrule">@inlinable</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">var</span> sharedUnownedExecutor<span class="token punctuation">:</span> <span class="token class-name">UnownedSerialExecutor</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">UnownedSerialExecutor</span><span class="token punctuation">(</span><span class="token class-name">Builtin</span><span class="token punctuation">.</span><span class="token function">buildMainActorExecutorRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看到 <code>MainActor</code> 是一个 actor 类型，这对于 <code>GlobalActor</code> 协议来说不是必须的，我们完全可以定义一个 class 来实现 <code>GlobalActor</code>，并且把一个 actor 类型关联到 <code>GlobalActor</code> 上即可。当然，如果条件允许，直接用 actor 类型来实现 <code>GlobalActor</code> 自然更方便一些。</p><p>我们在前面提到过，<code>sharedUnownedExecutor</code> 要与 <code>shared.unownedExecutor</code> 一致，这里很显然二者本质上都是 <code>Builtin.buildMainActorExecutorRef()</code>。</p><p>此外，<code>MainActor</code> 被 <code>@globalActor</code> 修饰之后，自己就可以被用于修饰属性、函数或者类型，我们给出几个简单的 <code>MainActor</code> 的例子：</p><p>修饰属性：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
    <span class="token attribute atrule">@MainActor</span> <span class="token keyword">var</span> value<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修饰函数：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token attribute atrule">@MainActor</span> <span class="token keyword">func</span> <span class="token function-definition function">calledOnMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修饰闭包：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">runOnMain</span><span class="token punctuation">(</span>block<span class="token punctuation">:</span> <span class="token attribute atrule">@MainActor</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;runOnMain before&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;runOnMain after&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修饰类：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token attribute atrule">@MainActor</span>
<span class="token keyword">class</span> <span class="token class-name">UiState</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> value<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">func</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>被 <code>@MainActor</code> 修饰的函数在调用时，如果当前不在主线程，则必须异步调度到主线程上执行；同样地，被修饰的属性在被其他线程访问时，也必须异步调度到主线程上处理。</p><p>被 <code>@MainActor</code> 修饰的类的构造器、属性、函数都需要调度到主线程上执行。需要注意的是，为了保证继承的一致性，被修饰的类需要满足或没有父类、或同样被 <code>@MainActor</code> 修饰、或父类是 <code>NSObject</code>；被修饰的类的子类也将会隐式获得 <code>@MainActor</code> 上的状态隔离。</p><p>这里的异步访问逻辑实际上与 actor 类型的状态和函数的关系相同，即被 <code>@MainActor</code> 修饰的函数内部访问同样被 <code>@MainActor</code> 修饰的属性时则不需要异步执行，就好像它们都被定义到 <code>MainActor</code> 这个 actor 类型当中一样。</p><p>以上使用方法和细节同样适用于其他 <code>GlobalActor</code> 的实现。</p><h2 id="自定义-globalactor-的实现" tabindex="-1"><a class="header-anchor" href="#自定义-globalactor-的实现" aria-hidden="true">#</a> 自定义 GlobalActor 的实现</h2><p>了解了 <code>MainActor</code> 的定义之后，我们就可以试着给出自定义的 <code>GlobalActor</code> 实现了，例如：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token attribute atrule">@globalActor</span> <span class="token keyword">actor</span> <span class="token class-name">MyActor</span><span class="token punctuation">:</span> <span class="token class-name">GlobalActor</span> <span class="token punctuation">{</span>

    <span class="token comment">// 实现 GlobalActor 协议当中的 associatedtype</span>
    <span class="token keyword">public</span> <span class="token keyword">typealias</span> <span class="token class-name">ActorType</span> <span class="token operator">=</span> <span class="token class-name">MyActor</span>

    <span class="token comment">// 实现 GlobalActor 当中的 shared，返回一个全局共享的 MyActor 实例</span>
    <span class="token keyword">static</span> <span class="token keyword">let</span> shared<span class="token punctuation">:</span> <span class="token class-name">MyActor</span> <span class="token operator">=</span> <span class="token class-name">MyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">let</span> _sharedExecutor <span class="token operator">=</span> <span class="token class-name">MyExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// 实现 GlobalActor 当中的 sharedUnownedExecutor，返回自己的调度器</span>
    <span class="token keyword">static</span> <span class="token keyword">let</span> sharedUnownedExecutor<span class="token punctuation">:</span> <span class="token class-name">UnownedSerialExecutor</span> <span class="token operator">=</span> _sharedExecutor<span class="token punctuation">.</span><span class="token function">asUnownedSerialExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// 显示实现 Actor 协议当中的调度器，避免让编译器自动生成</span>
    <span class="token keyword">let</span> unownedExecutor<span class="token punctuation">:</span> <span class="token class-name">UnownedSerialExecutor</span> <span class="token operator">=</span> sharedUnownedExecutor
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中自定义的调度器 <code>MyExecutor</code> 的定义如下：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MyExecutor</span> <span class="token punctuation">:</span> <span class="token class-name">SerialExecutor</span> <span class="token punctuation">{</span>

    <span class="token comment">// 自定义 DispatchQueue，用于真正地调度异步函数</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">let</span> dispatcher<span class="token punctuation">:</span> <span class="token class-name">DispatchQueue</span> <span class="token operator">=</span> <span class="token class-name">DispatchQueue</span><span class="token punctuation">(</span>label<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;MyActor&quot;</span></span><span class="token punctuation">)</span>

    <span class="token comment">// 需要调度时，Swift 的协程运行时会创建一个 UnownedJob 实例调用 enqueue 进行调度</span>
    <span class="token keyword">func</span> <span class="token function-definition function">enqueue</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> job<span class="token punctuation">:</span> <span class="token class-name">UnownedJob</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;enqueue&quot;</span></span><span class="token punctuation">)</span>
        <span class="token class-name">MyExecutor</span><span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">{</span>
            <span class="token comment">// 执行这个 job</span>
            job<span class="token punctuation">.</span><span class="token function">_runSynchronously</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">asUnownedSerialExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取 unowned 引用，得到 UnownedSerialExecutor 实例</span>
    <span class="token keyword">func</span> <span class="token function-definition function">asUnownedSerialExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UnownedSerialExecutor</span> <span class="token punctuation">{</span>
        <span class="token class-name">UnownedSerialExecutor</span><span class="token punctuation">(</span>ordinary<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大家可以简单阅读代码的注释来了解他们的作用。注意到 <code>MyActor</code> 也实现了 <code>GlobalActor</code> 协议，我们也使用 <code>@globalActor</code> 来修饰 <code>MyActor</code>，这样我们就可以用 <code>@MyActor</code> 像 <code>@MainActor</code> 那样去修饰函数、属性和类，并让它调度到我们自己实现的调度器上了。</p><p>有关 <code>MyActor</code> 的使用示例，我们将在下一节进一步讨论。</p>`,35),r=n("strong",null,"注意",-1),k={href:"https://github.com/rjmccall/swift-evolution/blob/custom-executors/proposals/0000-custom-executors.md",target:"_blank",rel:"noopener noreferrer"},d=e(`<h2 id="深入探讨-actor-与协程的调度" tabindex="-1"><a class="header-anchor" href="#深入探讨-actor-与协程的调度" aria-hidden="true">#</a> 深入探讨 Actor 与协程的调度</h2><p>Swift 的协程在执行调度问题上目前还比较含蓄，文档当中很少提及异步函数的执行以及异步函数返回时如何恢复。实际上，异步函数所在的调用位置会关联一个调度器，这个调度器要么来自于所在的 Task，要么来自于当前函数所属于的 actor 实例。</p><p>Swift 定义了两个默认的调度器，一个是并发的，一个是串行的；另外就是我们前面提到的，用于将异步函数调度到主线程上的主线程的调度器。</p><p>为了搞清楚 Swift 协程究竟是如何调度的，我们用 <code>MainActor</code> 和自定义的 <code>MyActor</code> 来调度我们的异步函数，看看有什么新发现。</p><p>在下面的例子当中，我们使用 @MainActor 修饰函数 calledOnMain：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token attribute atrule">@MainActor</span> <span class="token keyword">func</span> <span class="token function-definition function">calledOnMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;onMain&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来创建一个 Task 来调用它：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token class-name">Task</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token keyword">in</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task start&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token function">calledOnMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task end&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们使用 log 这个定义的函数来打印输出，它与 print 的不同之处在于它会同时打印当前线程：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token class-name">NSThread</span><span class="token punctuation">:</span> <span class="token number">0x6000015c41c0</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> task start
<span class="token punctuation">[</span><span class="token operator">&lt;</span>_NSMainThread<span class="token punctuation">:</span> <span class="token number">0x6000015c4080</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> name <span class="token operator">=</span> main<span class="token punctuation">}</span><span class="token punctuation">]</span> onMain
<span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token class-name">NSThread</span><span class="token punctuation">:</span> <span class="token number">0x6000015c41c0</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> task end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，calledOnMain 被调度到了 MainThread 上执行。task start 和 task end 执行所在的线程相同（当然也可以不同，但一定是相同的调度器所属的线程），这说明 calledOnMain 返回之后 Task 又被调度与之关联的调度器上执行。</p><p>@MainActor 也可以被用于修饰闭包的类型，例如：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">runOnMain</span><span class="token punctuation">(</span>block<span class="token punctuation">:</span> <span class="token attribute atrule">@MainActor</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;runOnMyExecutor start&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;runOnMyExecutor end&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们试着调用一下这个函数：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token class-name">Task</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token keyword">in</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task start&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> runOnMain <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;on main&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task end&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token class-name">NSThread</span><span class="token punctuation">:</span> <span class="token number">0x600000ac8480</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> task start
<span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token class-name">NSThread</span><span class="token punctuation">:</span> <span class="token number">0x600000ac8480</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> runOnMain before
<span class="token punctuation">[</span><span class="token operator">&lt;</span>_NSMainThread<span class="token punctuation">:</span> <span class="token number">0x600000ac8380</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> name <span class="token operator">=</span> main<span class="token punctuation">}</span><span class="token punctuation">]</span> on main
<span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token class-name">NSThread</span><span class="token punctuation">:</span> <span class="token number">0x600000ac8480</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> runOnMain after
<span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token class-name">NSThread</span><span class="token punctuation">:</span> <span class="token number">0x600000ac8480</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> task end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次只有 block 才会被调度到 MainThread 上，因为只有它被 @MainActor 修饰。</p><p>从这个例子当中我们其实还能推测出调度发生的位置，即：</p><ul><li>异步函数开始执行</li><li>异步函数返回之处</li></ul><p>实际上除此之外，Task 开始时也可能会发生一次调度。这些都是可能的调度位置，Swift 的运行时会根据实际情况判断调度前后是不是属于同一个调度器，以决定是不是真的需要发生调度。这些也能从我们待会儿的例子当中得到印证。</p><p>接下来我们使用 <code>MyActor</code> 依样画葫芦，完成类似的例子：</p><p>首先是函数的定义：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">runOnMyExecutor</span><span class="token punctuation">(</span>block<span class="token punctuation">:</span> <span class="token attribute atrule">@MyActor</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;runOnMyExecutor start&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;runOnMyExecutor end&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token attribute atrule">@MyActor</span> <span class="token keyword">func</span> <span class="token function-definition function">calledOnMyExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;onMyExecutor&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后调用它们：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token class-name">Task</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token keyword">in</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task start&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token function">calledOnMyExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> runOnMyExecutor <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;on MyExecutor before sleep&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000_000_000</span><span class="token punctuation">)</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;on MyExecutor after sleep&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task end&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token class-name">NSThread</span><span class="token punctuation">:</span> <span class="token number">0x600003eb4040</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> task start
<span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token class-name">NSThread</span><span class="token punctuation">:</span> <span class="token number">0x600003eb4040</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> enqueue
<span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token class-name">NSThread</span><span class="token punctuation">:</span> <span class="token number">0x600003eb4040</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> onMyExecutor
<span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token class-name">NSThread</span><span class="token punctuation">:</span> <span class="token number">0x600003eb4040</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> runOnMyExecutor start
<span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token class-name">NSThread</span><span class="token punctuation">:</span> <span class="token number">0x600003eb4040</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> enqueue
<span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token class-name">NSThread</span><span class="token punctuation">:</span> <span class="token number">0x600003eb4040</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> on <span class="token class-name">MyExecutor</span> before sleep
<span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token class-name">NSThread</span><span class="token punctuation">:</span> <span class="token number">0x600003eb8040</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> enqueue
<span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token class-name">NSThread</span><span class="token punctuation">:</span> <span class="token number">0x600003eb8040</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> on <span class="token class-name">MyExecutor</span> after sleep
<span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token class-name">NSThread</span><span class="token punctuation">:</span> <span class="token number">0x600003eb8040</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> runOnMyExecutor end
<span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token class-name">NSThread</span><span class="token punctuation">:</span> <span class="token number">0x600003eb8040</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> task end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到 <code>calledOnMyExecutor</code> 调用时、<code>runOnMyExecutor</code> 当中的 <code>block</code> 执行时、<code>block</code> 当中的 sleep 之后恢复时分别执行了一次 <code>enqueue</code>。大家有兴趣的话也可以在其中穿插一些需要调度到主线程的函数调用，看看实际的调度情况。</p><h2 id="task-与-actor-上下文" tabindex="-1"><a class="header-anchor" href="#task-与-actor-上下文" aria-hidden="true">#</a> Task 与 actor 上下文</h2><p>我们在前面介绍 Task 的构造时，讲到过可以使用 <code>init</code> 和 <code>detached</code> 两种方式来构造 Task 实例，前者会继承外部的上下文，包括 actor、TaskLocal 等，后者则不会。</p><p>下面的例子将会证明这其中有关 actor 的部分：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token class-name">Task</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token keyword">in</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task start&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> runOnMain <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task in runOnMain&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">.</span>value

        <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span>detached <span class="token punctuation">{</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;detached task in runOnMain&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">.</span>value
    <span class="token punctuation">}</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task end&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过前面的介绍，我们已经知道 runOnMain 的参数 block 会被调度到 MainThread 上执行，那么其中的两个 <code>Task</code> 的日志输出理论上会有不同的表现：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token class-name">NSThread</span><span class="token punctuation">:</span> <span class="token number">0x600001520180</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> task start
<span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token class-name">NSThread</span><span class="token punctuation">:</span> <span class="token number">0x600001520180</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> runOnMyExecutor start
<span class="token punctuation">[</span><span class="token operator">&lt;</span>_NSMainThread<span class="token punctuation">:</span> <span class="token number">0x600001520080</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> name <span class="token operator">=</span> main<span class="token punctuation">}</span><span class="token punctuation">]</span> task <span class="token keyword">in</span> runOnMain
<span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token class-name">NSThread</span><span class="token punctuation">:</span> <span class="token number">0x600001520180</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span> detached task <span class="token keyword">in</span> runOnMain
<span class="token punctuation">[</span><span class="token operator">&lt;</span>_NSMainThread<span class="token punctuation">:</span> <span class="token number">0x600001520080</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> name <span class="token operator">=</span> main<span class="token punctuation">}</span><span class="token punctuation">]</span> runOnMyExecutor end
<span class="token punctuation">[</span><span class="token operator">&lt;</span>_NSMainThread<span class="token punctuation">:</span> <span class="token number">0x600001520080</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> name <span class="token operator">=</span> main<span class="token punctuation">}</span><span class="token punctuation">]</span> task end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上也正是如此，<code>task in runOnMain</code> 打印到了 MainThread 上，而 <code>detached task in runOnMain</code> 因为通过 <code>detached</code> 创建的 <code>Task</code> 实例不会继承外部的 actor（以及其调度器），因此打印到了其他线程上（也就是默认的调度器上）。</p><p>Task 的两种不同的构造方式对于 TaskLocal 的继承情况同样如此，我们将在下一篇文章当中再给出对比示例。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本文我们详细介绍了 GlobalActor 的设计初衷、实现方式以及使用方法，也探讨了 Swift 协程的调度细节，相信读者看到这里时，已经掌握了绝大多数 Swift 协程的相关知识。</p><p>下一篇文章我们将简单介绍一下 TaskLocal 的使用方法。</p><h2 id="关于作者" tabindex="-1"><a class="header-anchor" href="#关于作者" aria-hidden="true">#</a> 关于作者</h2><p><strong>霍丙乾 bennyhuo</strong>，Google 开发者专家（Kotlin 方向）；<strong>《深入理解 Kotlin 协程》</strong> 作者（机械工业出版社，2020.6）；<strong>《深入实践 Kotlin 元编程》</strong> 作者（机械工业出版社，2023.8）；移动客户端工程师，先后就职于腾讯地图、猿辅导、腾讯视频。</p>`,42),m=n("li",null,"GitHub：https://github.com/bennyhuo",-1),v=n("li",null,"博客：https://www.bennyhuo.com",-1),b={href:"https://space.bilibili.com/28615855",target:"_blank",rel:"noopener noreferrer"},g=n("strong",null,"霍丙乾 bennyhuo",-1),w=n("li",null,[s("微信公众号："),n("strong",null,"霍丙乾 bennyhuo")],-1);function f(h,y){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("blockquote",null,[n("p",null,[r,s(" 截至本文撰写时，Swift 的最新版本为 5.5.1。当前 Swift 协程对于自定义调度器的支持还在提案阶段，细节可参见："),n("a",k,[s("Custom Executors"),t(a)]),s("。")])]),d,n("ul",null,[m,v,n("li",null,[s("bilibili："),n("a",b,[g,t(a)])]),w])])}const M=p(i,[["render",f],["__file","07-globalactor.html.vue"]]);export{M as default};
