import{_ as t,X as p,Y as e,Z as n,a0 as s,$ as o,a1 as c,D as l}from"./framework-98842e7a.js";const i={},u=c(`<h1 id="_5-task-的取消" tabindex="-1"><a class="header-anchor" href="#_5-task-的取消" aria-hidden="true">#</a> 5. Task 的取消</h1><blockquote><p>但凡是个任务，就有可能被取消。取消了该怎么办呢？</p></blockquote><h2 id="task-的取消就是个状态" tabindex="-1"><a class="header-anchor" href="#task-的取消就是个状态" aria-hidden="true">#</a> Task 的取消就是个状态</h2><p>Task 的取消其实非常简单，就是将 Task 标记为取消状态。那 Task 的执行体要怎么做才能让任务真正取消呢？我们先看个简单的例子：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> task <span class="token operator">=</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task start&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10_000_000_000</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task finish&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500_000_000</span><span class="token punctuation">)</span>
task<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">await</span> task<span class="token punctuation">.</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们创建了一个 Task，正常情况下它应该很快被执行到，因此第一行日志可以打印出来，随即进入 10s 的睡眠状态。但我们在 Task 外部等了 500ms 之后把它取消了，如果不出什么意外的话，在 Task 睡眠时它就被取消了。</p><p>既然任务被取消了，凭我们主观的判断，第二句日志应该是打印不出来的，但实际的情况却是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>task start
task finish
success()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这说明 Task 的取消只是一个状态标记，它不会强制 Task 的执行体中断，换句话说 Task 的取消并不像杀进程那样粗暴。</p><p>实际上，我们可以在任务的执行体当中读取到 Task 的取消状态，我们把程序稍作修改如下：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> task <span class="token operator">=</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task start&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10_000_000_000</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task finish, isCancelled: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token class-name">Task</span><span class="token punctuation">.</span>isCancelled</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500_000_000</span><span class="token punctuation">)</span>
task<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">await</span> task<span class="token punctuation">.</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>task start
task finish, isCancelled: true
success()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，Task 确实被取消了，我们也可以读取到这个状态，如果我们需要让我们的 Task 执行体响应它的取消状态，那就需要做出这个状态的判断，并且做出响应，例如：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token class-name">Task</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token operator">!</span><span class="token class-name">Task</span><span class="token punctuation">.</span>isCancelled <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task start&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10_000_000_000</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token operator">!</span><span class="token class-name">Task</span><span class="token punctuation">.</span>isCancelled <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task finish, isCancelled: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token class-name">Task</span><span class="token punctuation">.</span>isCancelled</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，这个例子还不够理想，毕竟睡眠的 10s 是不能响应取消的。那如果让 sleep 函数内部也能响应取消，问题是不是就解决了？</p><h2 id="通过抛-cancellationerror-来响应取消" tabindex="-1"><a class="header-anchor" href="#通过抛-cancellationerror-来响应取消" aria-hidden="true">#</a> 通过抛 CancellationError 来响应取消</h2><p>Task 的执行过程中，难免会存在多层异步函数的嵌套的情况，如果最深处的某一个函数响应了取消状态，怎样才能让外部的异步函数也能很好的配合好这个响应？这其实就是在回答上一节留下的 sleep 该如何响应取消的问题。如果想要优雅地给出这个答案，只能通过抛异常的方式了，因为任何条件分支的判断都无法实现有效的传播，而异常天然就具备这样的特性。</p><p>所以常见的异常响应方式非常简单，如果你在编写一个需要响应取消状态的异步函数，当你检查到 Task 被取消时，只需要抛一个 <code>CancellationError</code> 即可，大家都遵守这个规则，那么这个 Task 就能被优雅地结束。</p><p>实际上 Task 一共有两个 sleep 函数，我们仔细对比一下它们的定义：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">sleep</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> duration<span class="token punctuation">:</span> <span class="token class-name">UInt64</span><span class="token punctuation">)</span> <span class="token keyword">async</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">sleep</span><span class="token punctuation">(</span>nanoseconds duration<span class="token punctuation">:</span> <span class="token class-name">UInt64</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>二者的区别有两处：</p><ul><li>参数的 label</li><li>是否会抛出异常</li></ul><p>第二个函数明确通过参数的 label 告诉我们参数是纳秒，同时它还会抛出异常。什么异常？自然是在 Task 被取消时抛出 <code>CancellationError</code>。这么看来我们只需要稍微调整一下代码就能完美解决问题：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> task <span class="token operator">=</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task start&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>nanoseconds<span class="token punctuation">:</span> <span class="token number">10_000_000_000</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task finish, isCancelled: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token class-name">Task</span><span class="token punctuation">.</span>isCancelled</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500_000_000</span><span class="token punctuation">)</span>
task<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">await</span> task<span class="token punctuation">.</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>task start
failure(Swift.CancellationError())
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>符合预期。</p><p>实际上，如果大家仔细查阅 Swift 的文档，你就会发现第一个 sleep 函数已经被废弃了，它的问题想必大家也已经非常明白了吧。</p><h2 id="checkcancellation-更方便地检查取消状态" tabindex="-1"><a class="header-anchor" href="#checkcancellation-更方便地检查取消状态" aria-hidden="true">#</a> checkCancellation：更方便地检查取消状态</h2><p>前面的例子我们算是躺赢了，但如果实际的代码是下面这样呢？</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> task <span class="token operator">=</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task start&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">10000</span> <span class="token punctuation">{</span>
        <span class="token function">doHardWork</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> 
    <span class="token punctuation">}</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task finish, isCancelled: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token class-name">Task</span><span class="token punctuation">.</span>isCancelled</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不难，我们只需要加个判断嘛，这样在每次循环的开始，如果 Task 已经被取消，我们就能够及时地停止这个任务的执行：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> task <span class="token operator">=</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task start&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">10000</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token class-name">Task</span><span class="token punctuation">.</span>isCancelled <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token class-name">CancellationError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token function">doHardWork</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task finish, isCancelled: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token class-name">Task</span><span class="token punctuation">.</span>isCancelled</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实，这里有个更方便的写法：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> task <span class="token operator">=</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task start&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">10000</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">checkCancellation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">doHardWork</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;task finish, isCancelled: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token class-name">Task</span><span class="token punctuation">.</span>isCancelled</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数也没啥神秘的，因为它的实现非常直接：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">checkCancellation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token class-name">Task</span><span class="token operator">&lt;</span><span class="token class-name">Never</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">&gt;</span><span class="token punctuation">.</span>isCancelled <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> _Concurrency<span class="token punctuation">.</span><span class="token class-name">CancellationError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注册取消回调" tabindex="-1"><a class="header-anchor" href="#注册取消回调" aria-hidden="true">#</a> 注册取消回调</h2><p>前面提到的响应取消的情况实际上是两种类型：</p><ul><li>调用其他支持响应取消的异步函数，在取消时它会抛出 CancellationError</li><li>自己的代码当中主动检查取消状态，并抛出 CancellationError（或者直接退出执行逻辑）</li></ul><p>但如果异步的逻辑封装在第三方代码当中，我们只能想办法在 Task 取消时调用第三方的取消逻辑来完成响应，这时候情况就复杂一些了。我们就以 GCD 的异步 API 为例，首先我们对 DispatchWorkItem 做个包装：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">ContinuationWorkItem</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">&gt;</span> <span class="token keyword">where</span> <span class="token class-name">E</span><span class="token punctuation">:</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>

    <span class="token keyword">var</span> continuation<span class="token punctuation">:</span> <span class="token class-name">CheckedContinuation</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">&gt;?</span>
    <span class="token keyword">let</span> block<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">ContinuationWorkItem</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">T</span>

    <span class="token keyword">lazy</span> <span class="token keyword">var</span> dispatchItem<span class="token punctuation">:</span> <span class="token class-name">DispatchWorkItem</span> <span class="token operator">=</span> <span class="token class-name">DispatchWorkItem</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>continuation<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>returning<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">var</span> isCancelled<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token punctuation">{</span>
            <span class="token keyword">self</span><span class="token punctuation">.</span>dispatchItem<span class="token punctuation">.</span>isCancelled
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">init</span><span class="token punctuation">(</span>block<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token class-name">ContinuationWorkItem</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>block <span class="token operator">=</span> block
    <span class="token punctuation">}</span>

    <span class="token keyword">func</span> <span class="token function-definition function">installContinuation</span><span class="token punctuation">(</span>continuation<span class="token punctuation">:</span> <span class="token class-name">CheckedContinuation</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>continuation <span class="token operator">=</span> continuation
    <span class="token punctuation">}</span>

    <span class="token keyword">func</span> <span class="token function-definition function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dispatchItem<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个包装的目的在于支持 <code>installContinuation</code>，通过获取 Task 的 continuation 来实现异步结果的返回。</p><p>这里还有一个细节，block 的类型与 DispatchWorkItem 的 block 多了个参数：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> block<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">ContinuationWorkItem</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">T</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这主要是为了方面我们在 block 当中可以读取到 GCD 的任务是否被取消了。</p><p>接下来我们试着用 Task 来封装 GCD 的异步任务，并且实现对取消的响应：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> task <span class="token operator">=</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token keyword">in</span>
    <span class="token keyword">let</span> asyncRequest <span class="token operator">=</span> <span class="token class-name">ContinuationWorkItem</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> item <span class="token keyword">in</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;async start&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>item<span class="token punctuation">.</span>isCancelled <span class="token punctuation">{</span>
            <span class="token comment">// 单位 秒</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>forTimeInterval<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">)</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;i = </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> item<span class="token punctuation">.</span>isCancelled <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;async cancelled, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;async finish&quot;</span></span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">1</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">await</span> withTaskCancellationHandler <span class="token punctuation">{</span>
        <span class="token keyword">await</span> withCheckedContinuation <span class="token punctuation">{</span> <span class="token punctuation">(</span>continuation<span class="token punctuation">:</span> <span class="token class-name">CheckedContinuation</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token punctuation">,</span> <span class="token class-name">Never</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token keyword">in</span>
            asyncRequest<span class="token punctuation">.</span><span class="token function">installContinuation</span><span class="token punctuation">(</span>continuation<span class="token punctuation">:</span> continuation<span class="token punctuation">)</span>
            <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">async</span><span class="token punctuation">(</span>execute<span class="token punctuation">:</span> asyncRequest<span class="token punctuation">.</span>dispatchItem<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> onCancel<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        asyncRequest<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500_000_000</span><span class="token punctuation">)</span>
task<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">await</span> task<span class="token punctuation">.</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>asyncRequest 其实就是我们创建的对 ContinuationWorkItem 实例，它对 DispatchWorkItem 做了包装，在后面的代码当中传给了 DispatchQueue 去异步执行。为了能够及时感知到 Task 的取消状态变化，我们用到了 withTaskCancellationHandler 这个函数，它的定义如下：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">public</span> <span class="token keyword">func</span> <span class="token function-definition function">withTaskCancellationHandler</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>
    operation<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">T</span><span class="token punctuation">,</span> 
    onCancel handler<span class="token punctuation">:</span> <span class="token attribute atrule">@Sendable</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span>
<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">rethrows</span> <span class="token operator">-&gt;</span> <span class="token class-name">T</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显然，这个函数也是个异步函数，它有两个参数，分别是：</p><ul><li>operation，即我们要在当前 Task 当中执行的代码逻辑</li><li>onCancel，在 operation 执行时，如果 Task 被取消，该回调立即执行</li></ul><p>有了这个函数，我们就可以在调用第三方异步操作时，及时感知到 Task 的取消状态，并通知第三方取消异步操作。</p><h2 id="taskgroup-的取消" tabindex="-1"><a class="header-anchor" href="#taskgroup-的取消" aria-hidden="true">#</a> TaskGroup 的取消</h2><p>TaskGroup 也可以被取消，很容易理解，所有从属于 TaskGroup 的 Task 在前者被取消以后也会被取消。下面我们给出一个非常简单的例子来说明这个问题：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">let</span> taskCount <span class="token operator">=</span> <span class="token number">10</span>

<span class="token keyword">await</span> <span class="token function">withTaskGroup</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">,</span> <span class="token class-name">Int</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> group <span class="token operator">-&gt;</span> <span class="token class-name">Void</span> <span class="token keyword">in</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..&lt;</span>taskCount <span class="token punctuation">{</span>
        group<span class="token punctuation">.</span>addTask <span class="token punctuation">{</span>
            <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">while</span> <span class="token operator">!</span><span class="token class-name">Task</span><span class="token punctuation">.</span>isCancelled <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;</span> max <span class="token punctuation">{</span>
                <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000_000_000</span> <span class="token operator">+</span> <span class="token class-name">UInt64</span><span class="token punctuation">(</span><span class="token function">arc4random_uniform</span><span class="token punctuation">(</span><span class="token number">500_000_000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                count <span class="token operator">+=</span> <span class="token number">1</span>

                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Task: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, count: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> count<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">await</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5500_000_000</span><span class="token punctuation">)</span>
    group<span class="token punctuation">.</span><span class="token function">cancelAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> <span class="token keyword">await</span> result <span class="token keyword">in</span> group <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;result: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">result</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在 TaskGroup 当中启动了 10 个 Task， 这些 Task 每隔约 1 ~ 1.5 秒就会令 count 加 1，最终把 Task 的序号和 count 的值返回。TaskGroup 则在启动了所有的 Task 之后 5.5 秒的时候取消，因此前面的 Task 大多只能将 count 增加到 5 左右。运行结果如下：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token class-name">Task</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token number">1</span>
<span class="token class-name">Task</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token number">1</span>
<span class="token operator">...</span>
<span class="token class-name">Task</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token number">4</span>
<span class="token class-name">Task</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token number">4</span>
result<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token class-name">Task</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token number">4</span>
result<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token class-name">Task</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token number">4</span>
<span class="token class-name">Task</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token number">4</span>
result<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
result<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token class-name">Task</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token number">5</span>
result<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token class-name">Task</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token number">5</span>
<span class="token class-name">Task</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token number">5</span>
result<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
result<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token class-name">Task</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token number">5</span>
<span class="token class-name">Task</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token number">5</span>
result<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
result<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token class-name">Task</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token number">5</span>
result<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们省略了部分相似的输出，大家只需要关注包含 result 的行，其中 Task 9 返回的 count 为 4，Task 1 返回的 count 为 5。这说明 TaskGroup 在取消时其中的 Task 确实都被取消了。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本文我们重点讨论了 Task 的取消的设计，包括取消状态的概念，如何在不同情况下响应取消状态；最后也通过一个简单地例子了解了一下 TaskGroup 的取消。</p><p>大家只需要牢记一点，Task 的取消只是一个状态，需要内部执行逻辑的响应。</p><h2 id="关于作者" tabindex="-1"><a class="header-anchor" href="#关于作者" aria-hidden="true">#</a> 关于作者</h2><p><strong>霍丙乾 bennyhuo</strong>，Google 开发者专家（Kotlin 方向）；<strong>《深入理解 Kotlin 协程》</strong> 作者（机械工业出版社，2020.6）；<strong>《深入实践 Kotlin 元编程》</strong> 作者（机械工业出版社，2023.8）；移动客户端工程师，先后就职于腾讯地图、猿辅导、腾讯视频。</p>`,65),k=n("li",null,"GitHub：https://github.com/bennyhuo",-1),r=n("li",null,"博客：https://www.bennyhuo.com",-1),d={href:"https://space.bilibili.com/28615855",target:"_blank",rel:"noopener noreferrer"},v=n("strong",null,"霍丙乾 bennyhuo",-1),m=n("li",null,[s("微信公众号："),n("strong",null,"霍丙乾 bennyhuo")],-1);function b(w,f){const a=l("ExternalLinkIcon");return p(),e("div",null,[u,n("ul",null,[k,r,n("li",null,[s("bilibili："),n("a",d,[v,o(a)])]),m])])}const h=t(i,[["render",b],["__file","05-cancellation.html.vue"]]);export{h as default};
